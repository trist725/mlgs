// Code generated by protoc-gen-pbex2-go. DO NOT EDIT IT!!!
// source: mail.proto

/*
It has these top-level messages:
	C2S_GetMailList
	S2C_GetMailList
	C2S_GetMailReward
	S2C_GetMailReward
	C2S_GetAllMailReward
	S2C_GetAllMailReward
*/

package msg

import "sync"
import protocol "github.com/trist725/mgsu/network/protocol/protobuf/v2"

var _ *sync.Pool
var _ = protocol.PH

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [S2C_GetMailReward_E_Err] begin

var S2C_GetMailReward_E_Err_Slice = []int32{
	0,
	1,
	2,
	3,
}

func S2C_GetMailReward_E_Err_Len() int {
	return len(S2C_GetMailReward_E_Err_Slice)
}

func Check_S2C_GetMailReward_E_Err_I(value int32) bool {
	if _, ok := S2C_GetMailReward_E_Err_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_S2C_GetMailReward_E_Err(value S2C_GetMailReward_E_Err) bool {
	return Check_S2C_GetMailReward_E_Err_I(int32(value))
}

func Each_S2C_GetMailReward_E_Err(f func(S2C_GetMailReward_E_Err) bool) {
	for _, value := range S2C_GetMailReward_E_Err_Slice {
		if !f(S2C_GetMailReward_E_Err(value)) {
			break
		}
	}
}

func Each_S2C_GetMailReward_E_Err_I(f func(int32) bool) {
	for _, value := range S2C_GetMailReward_E_Err_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [S2C_GetMailReward_E_Err] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_GetMailList] begin
func (m *C2S_GetMailList) ResetEx() {

}

func (m C2S_GetMailList) Clone() *C2S_GetMailList {
	n, ok := g_C2S_GetMailList_Pool.Get().(*C2S_GetMailList)
	if !ok || n == nil {
		n = &C2S_GetMailList{}
	}

	return n
}

func Clone_C2S_GetMailList_Slice(dst []*C2S_GetMailList, src []*C2S_GetMailList) []*C2S_GetMailList {
	for _, i := range dst {
		Put_C2S_GetMailList(i)
	}
	dst = []*C2S_GetMailList{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_C2S_GetMailList() *C2S_GetMailList {
	m := &C2S_GetMailList{}
	return m
}

var g_C2S_GetMailList_Pool = sync.Pool{}

func Get_C2S_GetMailList() *C2S_GetMailList {
	m, ok := g_C2S_GetMailList_Pool.Get().(*C2S_GetMailList)
	if !ok {
		m = New_C2S_GetMailList()
	} else {
		if m == nil {
			m = New_C2S_GetMailList()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_GetMailList(i interface{}) {
	if m, ok := i.(*C2S_GetMailList); ok && m != nil {
		g_C2S_GetMailList_Pool.Put(i)
	}
}

// message [C2S_GetMailList] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_GetMailList] begin
func (m *S2C_GetMailList) ResetEx() {
	m.Ids = []string{}

}

func (m S2C_GetMailList) Clone() *S2C_GetMailList {
	n, ok := g_S2C_GetMailList_Pool.Get().(*S2C_GetMailList)
	if !ok || n == nil {
		n = &S2C_GetMailList{}
	}

	if len(m.Ids) > 0 {
		n.Ids = make([]string, len(m.Ids))
		copy(n.Ids, m.Ids)
	} else {
		n.Ids = []string{}
	}

	return n
}

func Clone_S2C_GetMailList_Slice(dst []*S2C_GetMailList, src []*S2C_GetMailList) []*S2C_GetMailList {
	for _, i := range dst {
		Put_S2C_GetMailList(i)
	}
	dst = []*S2C_GetMailList{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_S2C_GetMailList() *S2C_GetMailList {
	m := &S2C_GetMailList{
		Ids: []string{},
	}
	return m
}

var g_S2C_GetMailList_Pool = sync.Pool{}

func Get_S2C_GetMailList() *S2C_GetMailList {
	m, ok := g_S2C_GetMailList_Pool.Get().(*S2C_GetMailList)
	if !ok {
		m = New_S2C_GetMailList()
	} else {
		if m == nil {
			m = New_S2C_GetMailList()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_GetMailList(i interface{}) {
	if m, ok := i.(*S2C_GetMailList); ok && m != nil {
		g_S2C_GetMailList_Pool.Put(i)
	}
}

// message [S2C_GetMailList] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_GetMailReward] begin
func (m *C2S_GetMailReward) ResetEx() {
	m.Id = 0

}

func (m C2S_GetMailReward) Clone() *C2S_GetMailReward {
	n, ok := g_C2S_GetMailReward_Pool.Get().(*C2S_GetMailReward)
	if !ok || n == nil {
		n = &C2S_GetMailReward{}
	}

	n.Id = m.Id

	return n
}

func Clone_C2S_GetMailReward_Slice(dst []*C2S_GetMailReward, src []*C2S_GetMailReward) []*C2S_GetMailReward {
	for _, i := range dst {
		Put_C2S_GetMailReward(i)
	}
	dst = []*C2S_GetMailReward{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_C2S_GetMailReward() *C2S_GetMailReward {
	m := &C2S_GetMailReward{}
	return m
}

var g_C2S_GetMailReward_Pool = sync.Pool{}

func Get_C2S_GetMailReward() *C2S_GetMailReward {
	m, ok := g_C2S_GetMailReward_Pool.Get().(*C2S_GetMailReward)
	if !ok {
		m = New_C2S_GetMailReward()
	} else {
		if m == nil {
			m = New_C2S_GetMailReward()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_GetMailReward(i interface{}) {
	if m, ok := i.(*C2S_GetMailReward); ok && m != nil {
		g_C2S_GetMailReward_Pool.Put(i)
	}
}

// message [C2S_GetMailReward] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_GetMailReward] begin
func (m *S2C_GetMailReward) ResetEx() {
	m.Id = 0
	m.Err = 0

}

func (m S2C_GetMailReward) Clone() *S2C_GetMailReward {
	n, ok := g_S2C_GetMailReward_Pool.Get().(*S2C_GetMailReward)
	if !ok || n == nil {
		n = &S2C_GetMailReward{}
	}

	n.Id = m.Id
	n.Err = m.Err

	return n
}

func Clone_S2C_GetMailReward_Slice(dst []*S2C_GetMailReward, src []*S2C_GetMailReward) []*S2C_GetMailReward {
	for _, i := range dst {
		Put_S2C_GetMailReward(i)
	}
	dst = []*S2C_GetMailReward{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_S2C_GetMailReward() *S2C_GetMailReward {
	m := &S2C_GetMailReward{}
	return m
}

var g_S2C_GetMailReward_Pool = sync.Pool{}

func Get_S2C_GetMailReward() *S2C_GetMailReward {
	m, ok := g_S2C_GetMailReward_Pool.Get().(*S2C_GetMailReward)
	if !ok {
		m = New_S2C_GetMailReward()
	} else {
		if m == nil {
			m = New_S2C_GetMailReward()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_GetMailReward(i interface{}) {
	if m, ok := i.(*S2C_GetMailReward); ok && m != nil {
		g_S2C_GetMailReward_Pool.Put(i)
	}
}

// message [S2C_GetMailReward] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_GetAllMailReward] begin
func (m *C2S_GetAllMailReward) ResetEx() {

}

func (m C2S_GetAllMailReward) Clone() *C2S_GetAllMailReward {
	n, ok := g_C2S_GetAllMailReward_Pool.Get().(*C2S_GetAllMailReward)
	if !ok || n == nil {
		n = &C2S_GetAllMailReward{}
	}

	return n
}

func Clone_C2S_GetAllMailReward_Slice(dst []*C2S_GetAllMailReward, src []*C2S_GetAllMailReward) []*C2S_GetAllMailReward {
	for _, i := range dst {
		Put_C2S_GetAllMailReward(i)
	}
	dst = []*C2S_GetAllMailReward{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_C2S_GetAllMailReward() *C2S_GetAllMailReward {
	m := &C2S_GetAllMailReward{}
	return m
}

var g_C2S_GetAllMailReward_Pool = sync.Pool{}

func Get_C2S_GetAllMailReward() *C2S_GetAllMailReward {
	m, ok := g_C2S_GetAllMailReward_Pool.Get().(*C2S_GetAllMailReward)
	if !ok {
		m = New_C2S_GetAllMailReward()
	} else {
		if m == nil {
			m = New_C2S_GetAllMailReward()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_GetAllMailReward(i interface{}) {
	if m, ok := i.(*C2S_GetAllMailReward); ok && m != nil {
		g_C2S_GetAllMailReward_Pool.Put(i)
	}
}

// message [C2S_GetAllMailReward] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_GetAllMailReward] begin
func (m *S2C_GetAllMailReward) ResetEx() {
	m.Ids = []string{}

}

func (m S2C_GetAllMailReward) Clone() *S2C_GetAllMailReward {
	n, ok := g_S2C_GetAllMailReward_Pool.Get().(*S2C_GetAllMailReward)
	if !ok || n == nil {
		n = &S2C_GetAllMailReward{}
	}

	if len(m.Ids) > 0 {
		n.Ids = make([]string, len(m.Ids))
		copy(n.Ids, m.Ids)
	} else {
		n.Ids = []string{}
	}

	return n
}

func Clone_S2C_GetAllMailReward_Slice(dst []*S2C_GetAllMailReward, src []*S2C_GetAllMailReward) []*S2C_GetAllMailReward {
	for _, i := range dst {
		Put_S2C_GetAllMailReward(i)
	}
	dst = []*S2C_GetAllMailReward{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_S2C_GetAllMailReward() *S2C_GetAllMailReward {
	m := &S2C_GetAllMailReward{
		Ids: []string{},
	}
	return m
}

var g_S2C_GetAllMailReward_Pool = sync.Pool{}

func Get_S2C_GetAllMailReward() *S2C_GetAllMailReward {
	m, ok := g_S2C_GetAllMailReward_Pool.Get().(*S2C_GetAllMailReward)
	if !ok {
		m = New_S2C_GetAllMailReward()
	} else {
		if m == nil {
			m = New_S2C_GetAllMailReward()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_GetAllMailReward(i interface{}) {
	if m, ok := i.(*S2C_GetAllMailReward); ok && m != nil {
		g_S2C_GetAllMailReward_Pool.Put(i)
	}
}

// message [S2C_GetAllMailReward] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
