// Code generated by protoc-gen-pbex2-go. DO NOT EDIT IT!!!
// source: match.proto

/*
It has these top-level messages:
	Player
	Room
	C2S_QuickMatchStart
	S2C_QuickMatchStart
	C2S_PlayerLeaveRoom
	S2C_PlayerLeaveRoom
	S2C_UpdatePlayerJoinRoom
	S2C_UpdatePlayerLeaveRoom
*/

package msg

import "sync"
import protocol "github.com/trist725/mgsu/network/protocol/protobuf/v2"

var _ *sync.Pool
var _ = protocol.PH

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [S2C_QuickMatchStart_E_Err_QuickMatchStart] begin

var S2C_QuickMatchStart_E_Err_QuickMatchStart_Slice = []int32{
	0,
	1,
	2,
	3,
}

func S2C_QuickMatchStart_E_Err_QuickMatchStart_Len() int {
	return len(S2C_QuickMatchStart_E_Err_QuickMatchStart_Slice)
}

func Check_S2C_QuickMatchStart_E_Err_QuickMatchStart_I(value int32) bool {
	if _, ok := S2C_QuickMatchStart_E_Err_QuickMatchStart_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_S2C_QuickMatchStart_E_Err_QuickMatchStart(value S2C_QuickMatchStart_E_Err_QuickMatchStart) bool {
	return Check_S2C_QuickMatchStart_E_Err_QuickMatchStart_I(int32(value))
}

func Each_S2C_QuickMatchStart_E_Err_QuickMatchStart(f func(S2C_QuickMatchStart_E_Err_QuickMatchStart) bool) {
	for _, value := range S2C_QuickMatchStart_E_Err_QuickMatchStart_Slice {
		if !f(S2C_QuickMatchStart_E_Err_QuickMatchStart(value)) {
			break
		}
	}
}

func Each_S2C_QuickMatchStart_E_Err_QuickMatchStart_I(f func(int32) bool) {
	for _, value := range S2C_QuickMatchStart_E_Err_QuickMatchStart_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [S2C_QuickMatchStart_E_Err_QuickMatchStart] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom] begin

var S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom_Slice = []int32{
	0,
	1,
	2,
}

func S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom_Len() int {
	return len(S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom_Slice)
}

func Check_S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom_I(value int32) bool {
	if _, ok := S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom(value S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom) bool {
	return Check_S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom_I(int32(value))
}

func Each_S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom(f func(S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom) bool) {
	for _, value := range S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom_Slice {
		if !f(S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom(value)) {
			break
		}
	}
}

func Each_S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom_I(f func(int32) bool) {
	for _, value := range S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [S2C_PlayerLeaveRoom_E_Err_PlayerLeaveRoom] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [Player] begin
func (m *Player) ResetEx() {
	m.UserId = 0
	m.NickName = ""
	m.AvatarURL = ""
	m.Pos = 0
	m.Role = 0
	m.Chip = 0
	m.BetChip = 0

}

func (m Player) Clone() *Player {
	n, ok := g_Player_Pool.Get().(*Player)
	if !ok || n == nil {
		n = &Player{}
	}

	n.UserId = m.UserId
	n.NickName = m.NickName
	n.AvatarURL = m.AvatarURL
	n.Pos = m.Pos
	n.Role = m.Role
	n.Chip = m.Chip
	n.BetChip = m.BetChip

	return n
}

func Clone_Player_Slice(dst []*Player, src []*Player) []*Player {
	for _, i := range dst {
		Put_Player(i)
	}
	dst = []*Player{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_Player() *Player {
	m := &Player{}
	return m
}

var g_Player_Pool = sync.Pool{}

func Get_Player() *Player {
	m, ok := g_Player_Pool.Get().(*Player)
	if !ok {
		m = New_Player()
	} else {
		if m == nil {
			m = New_Player()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_Player(i interface{}) {
	if m, ok := i.(*Player); ok && m != nil {
		g_Player_Pool.Put(i)
	}
}

// message [Player] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [Room] begin
func (m *Room) ResetEx() {
	m.Id = 0
	m.Name = ""

	for _, i := range m.Players {
		Put_Player(i)
	}
	m.Players = []*Player{}
	m.Chip = 0
	m.MaxBet = 0

}

func (m Room) Clone() *Room {
	n, ok := g_Room_Pool.Get().(*Room)
	if !ok || n == nil {
		n = &Room{}
	}

	n.Id = m.Id
	n.Name = m.Name

	if len(m.Players) > 0 {
		for _, i := range m.Players {
			if i != nil {
				n.Players = append(n.Players, i.Clone())
			} else {
				n.Players = append(n.Players, nil)
			}
		}
	} else {
		n.Players = []*Player{}
	}

	n.Chip = m.Chip
	n.MaxBet = m.MaxBet

	return n
}

func Clone_Room_Slice(dst []*Room, src []*Room) []*Room {
	for _, i := range dst {
		Put_Room(i)
	}
	dst = []*Room{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_Room() *Room {
	m := &Room{
		Players: []*Player{},
	}
	return m
}

var g_Room_Pool = sync.Pool{}

func Get_Room() *Room {
	m, ok := g_Room_Pool.Get().(*Room)
	if !ok {
		m = New_Room()
	} else {
		if m == nil {
			m = New_Room()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_Room(i interface{}) {
	if m, ok := i.(*Room); ok && m != nil {
		g_Room_Pool.Put(i)
	}
}

// message [Room] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_QuickMatchStart] begin
func (m *C2S_QuickMatchStart) ResetEx() {

}

func (m C2S_QuickMatchStart) Clone() *C2S_QuickMatchStart {
	n, ok := g_C2S_QuickMatchStart_Pool.Get().(*C2S_QuickMatchStart)
	if !ok || n == nil {
		n = &C2S_QuickMatchStart{}
	}

	return n
}

func Clone_C2S_QuickMatchStart_Slice(dst []*C2S_QuickMatchStart, src []*C2S_QuickMatchStart) []*C2S_QuickMatchStart {
	for _, i := range dst {
		Put_C2S_QuickMatchStart(i)
	}
	dst = []*C2S_QuickMatchStart{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_C2S_QuickMatchStart() *C2S_QuickMatchStart {
	m := &C2S_QuickMatchStart{}
	return m
}

var g_C2S_QuickMatchStart_Pool = sync.Pool{}

func Get_C2S_QuickMatchStart() *C2S_QuickMatchStart {
	m, ok := g_C2S_QuickMatchStart_Pool.Get().(*C2S_QuickMatchStart)
	if !ok {
		m = New_C2S_QuickMatchStart()
	} else {
		if m == nil {
			m = New_C2S_QuickMatchStart()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_QuickMatchStart(i interface{}) {
	if m, ok := i.(*C2S_QuickMatchStart); ok && m != nil {
		g_C2S_QuickMatchStart_Pool.Put(i)
	}
}

// message [C2S_QuickMatchStart] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_QuickMatchStart] begin
func (m *S2C_QuickMatchStart) ResetEx() {
	m.Err = 0
	m.Room.ResetEx()

}

func (m S2C_QuickMatchStart) Clone() *S2C_QuickMatchStart {
	n, ok := g_S2C_QuickMatchStart_Pool.Get().(*S2C_QuickMatchStart)
	if !ok || n == nil {
		n = &S2C_QuickMatchStart{}
	}

	n.Err = m.Err
	n.Room = m.Room.Clone()

	return n
}

func Clone_S2C_QuickMatchStart_Slice(dst []*S2C_QuickMatchStart, src []*S2C_QuickMatchStart) []*S2C_QuickMatchStart {
	for _, i := range dst {
		Put_S2C_QuickMatchStart(i)
	}
	dst = []*S2C_QuickMatchStart{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_S2C_QuickMatchStart() *S2C_QuickMatchStart {
	m := &S2C_QuickMatchStart{
		Room: New_Room(),
	}
	return m
}

var g_S2C_QuickMatchStart_Pool = sync.Pool{}

func Get_S2C_QuickMatchStart() *S2C_QuickMatchStart {
	m, ok := g_S2C_QuickMatchStart_Pool.Get().(*S2C_QuickMatchStart)
	if !ok {
		m = New_S2C_QuickMatchStart()
	} else {
		if m == nil {
			m = New_S2C_QuickMatchStart()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_QuickMatchStart(i interface{}) {
	if m, ok := i.(*S2C_QuickMatchStart); ok && m != nil {
		g_S2C_QuickMatchStart_Pool.Put(i)
	}
}

// message [S2C_QuickMatchStart] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_PlayerLeaveRoom] begin
func (m *C2S_PlayerLeaveRoom) ResetEx() {

}

func (m C2S_PlayerLeaveRoom) Clone() *C2S_PlayerLeaveRoom {
	n, ok := g_C2S_PlayerLeaveRoom_Pool.Get().(*C2S_PlayerLeaveRoom)
	if !ok || n == nil {
		n = &C2S_PlayerLeaveRoom{}
	}

	return n
}

func Clone_C2S_PlayerLeaveRoom_Slice(dst []*C2S_PlayerLeaveRoom, src []*C2S_PlayerLeaveRoom) []*C2S_PlayerLeaveRoom {
	for _, i := range dst {
		Put_C2S_PlayerLeaveRoom(i)
	}
	dst = []*C2S_PlayerLeaveRoom{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_C2S_PlayerLeaveRoom() *C2S_PlayerLeaveRoom {
	m := &C2S_PlayerLeaveRoom{}
	return m
}

var g_C2S_PlayerLeaveRoom_Pool = sync.Pool{}

func Get_C2S_PlayerLeaveRoom() *C2S_PlayerLeaveRoom {
	m, ok := g_C2S_PlayerLeaveRoom_Pool.Get().(*C2S_PlayerLeaveRoom)
	if !ok {
		m = New_C2S_PlayerLeaveRoom()
	} else {
		if m == nil {
			m = New_C2S_PlayerLeaveRoom()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_PlayerLeaveRoom(i interface{}) {
	if m, ok := i.(*C2S_PlayerLeaveRoom); ok && m != nil {
		g_C2S_PlayerLeaveRoom_Pool.Put(i)
	}
}

// message [C2S_PlayerLeaveRoom] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_PlayerLeaveRoom] begin
func (m *S2C_PlayerLeaveRoom) ResetEx() {
	m.Err = 0

}

func (m S2C_PlayerLeaveRoom) Clone() *S2C_PlayerLeaveRoom {
	n, ok := g_S2C_PlayerLeaveRoom_Pool.Get().(*S2C_PlayerLeaveRoom)
	if !ok || n == nil {
		n = &S2C_PlayerLeaveRoom{}
	}

	n.Err = m.Err

	return n
}

func Clone_S2C_PlayerLeaveRoom_Slice(dst []*S2C_PlayerLeaveRoom, src []*S2C_PlayerLeaveRoom) []*S2C_PlayerLeaveRoom {
	for _, i := range dst {
		Put_S2C_PlayerLeaveRoom(i)
	}
	dst = []*S2C_PlayerLeaveRoom{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_S2C_PlayerLeaveRoom() *S2C_PlayerLeaveRoom {
	m := &S2C_PlayerLeaveRoom{}
	return m
}

var g_S2C_PlayerLeaveRoom_Pool = sync.Pool{}

func Get_S2C_PlayerLeaveRoom() *S2C_PlayerLeaveRoom {
	m, ok := g_S2C_PlayerLeaveRoom_Pool.Get().(*S2C_PlayerLeaveRoom)
	if !ok {
		m = New_S2C_PlayerLeaveRoom()
	} else {
		if m == nil {
			m = New_S2C_PlayerLeaveRoom()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_PlayerLeaveRoom(i interface{}) {
	if m, ok := i.(*S2C_PlayerLeaveRoom); ok && m != nil {
		g_S2C_PlayerLeaveRoom_Pool.Put(i)
	}
}

// message [S2C_PlayerLeaveRoom] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_UpdatePlayerJoinRoom] begin
func (m *S2C_UpdatePlayerJoinRoom) ResetEx() {

	for _, i := range m.Players {
		Put_Player(i)
	}
	m.Players = []*Player{}

}

func (m S2C_UpdatePlayerJoinRoom) Clone() *S2C_UpdatePlayerJoinRoom {
	n, ok := g_S2C_UpdatePlayerJoinRoom_Pool.Get().(*S2C_UpdatePlayerJoinRoom)
	if !ok || n == nil {
		n = &S2C_UpdatePlayerJoinRoom{}
	}

	if len(m.Players) > 0 {
		for _, i := range m.Players {
			if i != nil {
				n.Players = append(n.Players, i.Clone())
			} else {
				n.Players = append(n.Players, nil)
			}
		}
	} else {
		n.Players = []*Player{}
	}

	return n
}

func Clone_S2C_UpdatePlayerJoinRoom_Slice(dst []*S2C_UpdatePlayerJoinRoom, src []*S2C_UpdatePlayerJoinRoom) []*S2C_UpdatePlayerJoinRoom {
	for _, i := range dst {
		Put_S2C_UpdatePlayerJoinRoom(i)
	}
	dst = []*S2C_UpdatePlayerJoinRoom{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_S2C_UpdatePlayerJoinRoom() *S2C_UpdatePlayerJoinRoom {
	m := &S2C_UpdatePlayerJoinRoom{
		Players: []*Player{},
	}
	return m
}

var g_S2C_UpdatePlayerJoinRoom_Pool = sync.Pool{}

func Get_S2C_UpdatePlayerJoinRoom() *S2C_UpdatePlayerJoinRoom {
	m, ok := g_S2C_UpdatePlayerJoinRoom_Pool.Get().(*S2C_UpdatePlayerJoinRoom)
	if !ok {
		m = New_S2C_UpdatePlayerJoinRoom()
	} else {
		if m == nil {
			m = New_S2C_UpdatePlayerJoinRoom()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_UpdatePlayerJoinRoom(i interface{}) {
	if m, ok := i.(*S2C_UpdatePlayerJoinRoom); ok && m != nil {
		g_S2C_UpdatePlayerJoinRoom_Pool.Put(i)
	}
}

// message [S2C_UpdatePlayerJoinRoom] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_UpdatePlayerLeaveRoom] begin
func (m *S2C_UpdatePlayerLeaveRoom) ResetEx() {
	m.UserIds = []int64{}

}

func (m S2C_UpdatePlayerLeaveRoom) Clone() *S2C_UpdatePlayerLeaveRoom {
	n, ok := g_S2C_UpdatePlayerLeaveRoom_Pool.Get().(*S2C_UpdatePlayerLeaveRoom)
	if !ok || n == nil {
		n = &S2C_UpdatePlayerLeaveRoom{}
	}

	if len(m.UserIds) > 0 {
		n.UserIds = make([]int64, len(m.UserIds))
		copy(n.UserIds, m.UserIds)
	} else {
		n.UserIds = []int64{}
	}

	return n
}

func Clone_S2C_UpdatePlayerLeaveRoom_Slice(dst []*S2C_UpdatePlayerLeaveRoom, src []*S2C_UpdatePlayerLeaveRoom) []*S2C_UpdatePlayerLeaveRoom {
	for _, i := range dst {
		Put_S2C_UpdatePlayerLeaveRoom(i)
	}
	dst = []*S2C_UpdatePlayerLeaveRoom{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_S2C_UpdatePlayerLeaveRoom() *S2C_UpdatePlayerLeaveRoom {
	m := &S2C_UpdatePlayerLeaveRoom{
		UserIds: []int64{},
	}
	return m
}

var g_S2C_UpdatePlayerLeaveRoom_Pool = sync.Pool{}

func Get_S2C_UpdatePlayerLeaveRoom() *S2C_UpdatePlayerLeaveRoom {
	m, ok := g_S2C_UpdatePlayerLeaveRoom_Pool.Get().(*S2C_UpdatePlayerLeaveRoom)
	if !ok {
		m = New_S2C_UpdatePlayerLeaveRoom()
	} else {
		if m == nil {
			m = New_S2C_UpdatePlayerLeaveRoom()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_UpdatePlayerLeaveRoom(i interface{}) {
	if m, ok := i.(*S2C_UpdatePlayerLeaveRoom); ok && m != nil {
		g_S2C_UpdatePlayerLeaveRoom_Pool.Put(i)
	}
}

// message [S2C_UpdatePlayerLeaveRoom] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
