// Code generated by protoc-gen-pbex-go. DO NOT EDIT IT!!!
// source: user.proto

package msg

import (
	json "encoding/json"
	fmt "fmt"
	math "math"
	sync "sync"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [S2C_UpdateUserData_E_Error] begin

var S2C_UpdateUserData_E_Error_Slice = []int32{
	0,
	1,
	2,
}

func S2C_UpdateUserData_E_Error_Len() int {
	return len(S2C_UpdateUserData_E_Error_Slice)
}

func Check_S2C_UpdateUserData_E_Error_I(value int32) bool {
	if _, ok := S2C_UpdateUserData_E_Error_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_S2C_UpdateUserData_E_Error(value S2C_UpdateUserData_E_Error) bool {
	return Check_S2C_UpdateUserData_E_Error_I(int32(value))
}

func Each_S2C_UpdateUserData_E_Error(f func(S2C_UpdateUserData_E_Error) bool) {
	for _, value := range S2C_UpdateUserData_E_Error_Slice {
		if !f(S2C_UpdateUserData_E_Error(value)) {
			break
		}
	}
}

func Each_S2C_UpdateUserData_E_Error_I(f func(int32) bool) {
	for _, value := range S2C_UpdateUserData_E_Error_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [S2C_UpdateUserData_E_Error] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [User] begin
func (m *User) ResetEx() {

	m.ID = 0

	m.NickName = ""

	m.Sex = ""

	for _, i := range m.Items {
		Put_Item(i)
	}

	//m.Items = []*Item{}
	m.Items = nil

	for _, i := range m.Monies {
		Put_Money(i)
	}

	//m.Monies = []*Money{}
	m.Monies = nil

	m.Level = 0

	m.Exp = 0

}

func (m User) Clone() *User {
	n, ok := g_User_Pool.Get().(*User)
	if !ok || n == nil {
		n = &User{}
	}

	n.ID = m.ID

	n.NickName = m.NickName

	n.Sex = m.Sex

	if len(m.Items) > 0 {
		n.Items = make([]*Item, len(m.Items))
		for i, e := range m.Items {

			if e != nil {
				n.Items[i] = e.Clone()
			}

		}
	} else {
		//n.Items = []*Item{}
		n.Items = nil
	}

	if len(m.Monies) > 0 {
		n.Monies = make([]*Money, len(m.Monies))
		for i, e := range m.Monies {

			if e != nil {
				n.Monies[i] = e.Clone()
			}

		}
	} else {
		//n.Monies = []*Money{}
		n.Monies = nil
	}

	n.Level = m.Level

	n.Exp = m.Exp

	return n
}

func Clone_User_Slice(dst []*User, src []*User) []*User {
	for _, i := range dst {
		Put_User(i)
	}
	if len(src) > 0 {
		dst = make([]*User, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*User{}
		dst = nil
	}
	return dst
}

func (m User) JsonString() string {
	ba, _ := json.Marshal(m)
	return "User:" + string(ba)
}

func New_User() *User {
	m := &User{}
	return m
}

var g_User_Pool = sync.Pool{}

func Get_User() *User {
	m, ok := g_User_Pool.Get().(*User)
	if !ok {
		m = New_User()
	} else {
		if m == nil {
			m = New_User()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_User(i interface{}) {
	if m, ok := i.(*User); ok && m != nil {
		g_User_Pool.Put(i)
	}
}

// message [User] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_UpdateUserData] begin
func (m *S2C_UpdateUserData) ResetEx() {

	m.Err = 0

	if m.Data != nil {
		m.Data.ResetEx()
	} else {
		m.Data = Get_User()
	}

}

func (m S2C_UpdateUserData) Clone() *S2C_UpdateUserData {
	n, ok := g_S2C_UpdateUserData_Pool.Get().(*S2C_UpdateUserData)
	if !ok || n == nil {
		n = &S2C_UpdateUserData{}
	}

	n.Err = m.Err

	if m.Data != nil {
		n.Data = m.Data.Clone()
	}

	return n
}

func Clone_S2C_UpdateUserData_Slice(dst []*S2C_UpdateUserData, src []*S2C_UpdateUserData) []*S2C_UpdateUserData {
	for _, i := range dst {
		Put_S2C_UpdateUserData(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_UpdateUserData, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_UpdateUserData{}
		dst = nil
	}
	return dst
}

func (m S2C_UpdateUserData) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_UpdateUserData:" + string(ba)
}

func New_S2C_UpdateUserData() *S2C_UpdateUserData {
	m := &S2C_UpdateUserData{

		Data: New_User(),
	}
	return m
}

var g_S2C_UpdateUserData_Pool = sync.Pool{}

func Get_S2C_UpdateUserData() *S2C_UpdateUserData {
	m, ok := g_S2C_UpdateUserData_Pool.Get().(*S2C_UpdateUserData)
	if !ok {
		m = New_S2C_UpdateUserData()
	} else {
		if m == nil {
			m = New_S2C_UpdateUserData()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_UpdateUserData(i interface{}) {
	if m, ok := i.(*S2C_UpdateUserData); ok && m != nil {
		g_S2C_UpdateUserData_Pool.Put(i)
	}
}

// message [S2C_UpdateUserData] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_UpdateUserData] begin
func (m *C2S_UpdateUserData) ResetEx() {

	m.ID = ""

}

func (m C2S_UpdateUserData) Clone() *C2S_UpdateUserData {
	n, ok := g_C2S_UpdateUserData_Pool.Get().(*C2S_UpdateUserData)
	if !ok || n == nil {
		n = &C2S_UpdateUserData{}
	}

	n.ID = m.ID

	return n
}

func Clone_C2S_UpdateUserData_Slice(dst []*C2S_UpdateUserData, src []*C2S_UpdateUserData) []*C2S_UpdateUserData {
	for _, i := range dst {
		Put_C2S_UpdateUserData(i)
	}
	if len(src) > 0 {
		dst = make([]*C2S_UpdateUserData, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*C2S_UpdateUserData{}
		dst = nil
	}
	return dst
}

func (m C2S_UpdateUserData) JsonString() string {
	ba, _ := json.Marshal(m)
	return "C2S_UpdateUserData:" + string(ba)
}

func New_C2S_UpdateUserData() *C2S_UpdateUserData {
	m := &C2S_UpdateUserData{}
	return m
}

var g_C2S_UpdateUserData_Pool = sync.Pool{}

func Get_C2S_UpdateUserData() *C2S_UpdateUserData {
	m, ok := g_C2S_UpdateUserData_Pool.Get().(*C2S_UpdateUserData)
	if !ok {
		m = New_C2S_UpdateUserData()
	} else {
		if m == nil {
			m = New_C2S_UpdateUserData()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_UpdateUserData(i interface{}) {
	if m, ok := i.(*C2S_UpdateUserData); ok && m != nil {
		g_C2S_UpdateUserData_Pool.Put(i)
	}
}

// message [C2S_UpdateUserData] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_UpdateItems] begin
func (m *S2C_UpdateItems) ResetEx() {

	for _, i := range m.GainItems {
		Put_Item(i)
	}

	//m.GainItems = []*Item{}
	m.GainItems = nil

	for _, i := range m.LostItems {
		Put_Item(i)
	}

	//m.LostItems = []*Item{}
	m.LostItems = nil

}

func (m S2C_UpdateItems) Clone() *S2C_UpdateItems {
	n, ok := g_S2C_UpdateItems_Pool.Get().(*S2C_UpdateItems)
	if !ok || n == nil {
		n = &S2C_UpdateItems{}
	}

	if len(m.GainItems) > 0 {
		n.GainItems = make([]*Item, len(m.GainItems))
		for i, e := range m.GainItems {

			if e != nil {
				n.GainItems[i] = e.Clone()
			}

		}
	} else {
		//n.GainItems = []*Item{}
		n.GainItems = nil
	}

	if len(m.LostItems) > 0 {
		n.LostItems = make([]*Item, len(m.LostItems))
		for i, e := range m.LostItems {

			if e != nil {
				n.LostItems[i] = e.Clone()
			}

		}
	} else {
		//n.LostItems = []*Item{}
		n.LostItems = nil
	}

	return n
}

func Clone_S2C_UpdateItems_Slice(dst []*S2C_UpdateItems, src []*S2C_UpdateItems) []*S2C_UpdateItems {
	for _, i := range dst {
		Put_S2C_UpdateItems(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_UpdateItems, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_UpdateItems{}
		dst = nil
	}
	return dst
}

func (m S2C_UpdateItems) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_UpdateItems:" + string(ba)
}

func New_S2C_UpdateItems() *S2C_UpdateItems {
	m := &S2C_UpdateItems{}
	return m
}

var g_S2C_UpdateItems_Pool = sync.Pool{}

func Get_S2C_UpdateItems() *S2C_UpdateItems {
	m, ok := g_S2C_UpdateItems_Pool.Get().(*S2C_UpdateItems)
	if !ok {
		m = New_S2C_UpdateItems()
	} else {
		if m == nil {
			m = New_S2C_UpdateItems()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_UpdateItems(i interface{}) {
	if m, ok := i.(*S2C_UpdateItems); ok && m != nil {
		g_S2C_UpdateItems_Pool.Put(i)
	}
}

// message [S2C_UpdateItems] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
