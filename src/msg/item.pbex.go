// Code generated by protoc-gen-pbex-go. DO NOT EDIT IT!!!
// source: item.proto

package msg

import (
	json "encoding/json"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [Item] begin
func (m *Item) ResetEx() {

	m.UID = ""

	m.TID = 0

	m.Num = 0

}

func (m Item) Clone() *Item {
	n, ok := g_Item_Pool.Get().(*Item)
	if !ok || n == nil {
		n = &Item{}
	}

	n.UID = m.UID

	n.TID = m.TID

	n.Num = m.Num

	return n
}

func Clone_Item_Slice(dst []*Item, src []*Item) []*Item {
	for _, i := range dst {
		Put_Item(i)
	}
	if len(src) > 0 {
		dst = make([]*Item, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*Item{}
		dst = nil
	}
	return dst
}

func (m Item) JsonString() string {
	ba, _ := json.Marshal(m)
	return "Item:" + string(ba)
}

func New_Item() *Item {
	m := &Item{}
	return m
}

var g_Item_Pool = sync.Pool{}

func Get_Item() *Item {
	m, ok := g_Item_Pool.Get().(*Item)
	if !ok {
		m = New_Item()
	} else {
		if m == nil {
			m = New_Item()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_Item(i interface{}) {
	if m, ok := i.(*Item); ok && m != nil {
		g_Item_Pool.Put(i)
	}
}

// message [Item] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_GainItem] begin
func (m *S2C_GainItem) ResetEx() {

	for _, i := range m.Items {
		Put_Item(i)
	}

	//m.Items = []*Item{}
	m.Items = nil

}

func (m S2C_GainItem) Clone() *S2C_GainItem {
	n, ok := g_S2C_GainItem_Pool.Get().(*S2C_GainItem)
	if !ok || n == nil {
		n = &S2C_GainItem{}
	}

	if len(m.Items) > 0 {
		n.Items = make([]*Item, len(m.Items))
		for i, e := range m.Items {

			if e != nil {
				n.Items[i] = e.Clone()
			}

		}
	} else {
		//n.Items = []*Item{}
		n.Items = nil
	}

	return n
}

func Clone_S2C_GainItem_Slice(dst []*S2C_GainItem, src []*S2C_GainItem) []*S2C_GainItem {
	for _, i := range dst {
		Put_S2C_GainItem(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_GainItem, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_GainItem{}
		dst = nil
	}
	return dst
}

func (m S2C_GainItem) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_GainItem:" + string(ba)
}

func New_S2C_GainItem() *S2C_GainItem {
	m := &S2C_GainItem{}
	return m
}

var g_S2C_GainItem_Pool = sync.Pool{}

func Get_S2C_GainItem() *S2C_GainItem {
	m, ok := g_S2C_GainItem_Pool.Get().(*S2C_GainItem)
	if !ok {
		m = New_S2C_GainItem()
	} else {
		if m == nil {
			m = New_S2C_GainItem()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_GainItem(i interface{}) {
	if m, ok := i.(*S2C_GainItem); ok && m != nil {
		g_S2C_GainItem_Pool.Put(i)
	}
}

// message [S2C_GainItem] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_LostItem] begin
func (m *S2C_LostItem) ResetEx() {

	//m.IDs = []string{}
	m.IDs = nil

}

func (m S2C_LostItem) Clone() *S2C_LostItem {
	n, ok := g_S2C_LostItem_Pool.Get().(*S2C_LostItem)
	if !ok || n == nil {
		n = &S2C_LostItem{}
	}

	if len(m.IDs) > 0 {
		n.IDs = make([]string, len(m.IDs))
		copy(n.IDs, m.IDs)
	} else {
		//n.IDs = []string{}
		n.IDs = nil
	}

	return n
}

func Clone_S2C_LostItem_Slice(dst []*S2C_LostItem, src []*S2C_LostItem) []*S2C_LostItem {
	for _, i := range dst {
		Put_S2C_LostItem(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_LostItem, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_LostItem{}
		dst = nil
	}
	return dst
}

func (m S2C_LostItem) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_LostItem:" + string(ba)
}

func New_S2C_LostItem() *S2C_LostItem {
	m := &S2C_LostItem{}
	return m
}

var g_S2C_LostItem_Pool = sync.Pool{}

func Get_S2C_LostItem() *S2C_LostItem {
	m, ok := g_S2C_LostItem_Pool.Get().(*S2C_LostItem)
	if !ok {
		m = New_S2C_LostItem()
	} else {
		if m == nil {
			m = New_S2C_LostItem()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_LostItem(i interface{}) {
	if m, ok := i.(*S2C_LostItem); ok && m != nil {
		g_S2C_LostItem_Pool.Put(i)
	}
}

// message [S2C_LostItem] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_UpdateItem] begin
func (m *S2C_UpdateItem) ResetEx() {

	for _, i := range m.Items {
		Put_Item(i)
	}

	//m.Items = []*Item{}
	m.Items = nil

}

func (m S2C_UpdateItem) Clone() *S2C_UpdateItem {
	n, ok := g_S2C_UpdateItem_Pool.Get().(*S2C_UpdateItem)
	if !ok || n == nil {
		n = &S2C_UpdateItem{}
	}

	if len(m.Items) > 0 {
		n.Items = make([]*Item, len(m.Items))
		for i, e := range m.Items {

			if e != nil {
				n.Items[i] = e.Clone()
			}

		}
	} else {
		//n.Items = []*Item{}
		n.Items = nil
	}

	return n
}

func Clone_S2C_UpdateItem_Slice(dst []*S2C_UpdateItem, src []*S2C_UpdateItem) []*S2C_UpdateItem {
	for _, i := range dst {
		Put_S2C_UpdateItem(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_UpdateItem, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_UpdateItem{}
		dst = nil
	}
	return dst
}

func (m S2C_UpdateItem) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_UpdateItem:" + string(ba)
}

func New_S2C_UpdateItem() *S2C_UpdateItem {
	m := &S2C_UpdateItem{}
	return m
}

var g_S2C_UpdateItem_Pool = sync.Pool{}

func Get_S2C_UpdateItem() *S2C_UpdateItem {
	m, ok := g_S2C_UpdateItem_Pool.Get().(*S2C_UpdateItem)
	if !ok {
		m = New_S2C_UpdateItem()
	} else {
		if m == nil {
			m = New_S2C_UpdateItem()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_UpdateItem(i interface{}) {
	if m, ok := i.(*S2C_UpdateItem); ok && m != nil {
		g_S2C_UpdateItem_Pool.Put(i)
	}
}

// message [S2C_UpdateItem] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_UseItem] begin
func (m *C2S_UseItem) ResetEx() {

	m.TID = 0

	m.Num = 0

}

func (m C2S_UseItem) Clone() *C2S_UseItem {
	n, ok := g_C2S_UseItem_Pool.Get().(*C2S_UseItem)
	if !ok || n == nil {
		n = &C2S_UseItem{}
	}

	n.TID = m.TID

	n.Num = m.Num

	return n
}

func Clone_C2S_UseItem_Slice(dst []*C2S_UseItem, src []*C2S_UseItem) []*C2S_UseItem {
	for _, i := range dst {
		Put_C2S_UseItem(i)
	}
	if len(src) > 0 {
		dst = make([]*C2S_UseItem, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*C2S_UseItem{}
		dst = nil
	}
	return dst
}

func (m C2S_UseItem) JsonString() string {
	ba, _ := json.Marshal(m)
	return "C2S_UseItem:" + string(ba)
}

func New_C2S_UseItem() *C2S_UseItem {
	m := &C2S_UseItem{}
	return m
}

var g_C2S_UseItem_Pool = sync.Pool{}

func Get_C2S_UseItem() *C2S_UseItem {
	m, ok := g_C2S_UseItem_Pool.Get().(*C2S_UseItem)
	if !ok {
		m = New_C2S_UseItem()
	} else {
		if m == nil {
			m = New_C2S_UseItem()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_UseItem(i interface{}) {
	if m, ok := i.(*C2S_UseItem); ok && m != nil {
		g_C2S_UseItem_Pool.Put(i)
	}
}

// message [C2S_UseItem] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
