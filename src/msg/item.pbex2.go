// Code generated by protoc-gen-pbex2-go. DO NOT EDIT IT!!!
// source: item.proto

/*
It has these top-level messages:
	Item
	S2C_GainItem
	S2C_LostItem
	S2C_UpdateItem
	C2S_UseItem
*/

package msg

import "sync"
import protocol "github.com/trist725/mgsu/network/protocol/protobuf/v2"

var _ *sync.Pool
var _ = protocol.PH

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [Item] begin
func (m *Item) ResetEx() {
	m.UID = ""
	m.TID = 0
	m.Num = 0

}

func (m Item) Clone() *Item {
	n, ok := g_Item_Pool.Get().(*Item)
	if !ok || n == nil {
		n = &Item{}
	}

	n.UID = m.UID
	n.TID = m.TID
	n.Num = m.Num

	return n
}

func Clone_Item_Slice(dst []*Item, src []*Item) []*Item {
	for _, i := range dst {
		Put_Item(i)
	}
	dst = []*Item{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_Item() *Item {
	m := &Item{}
	return m
}

var g_Item_Pool = sync.Pool{}

func Get_Item() *Item {
	m, ok := g_Item_Pool.Get().(*Item)
	if !ok {
		m = New_Item()
	} else {
		if m == nil {
			m = New_Item()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_Item(i interface{}) {
	if m, ok := i.(*Item); ok && m != nil {
		g_Item_Pool.Put(i)
	}
}

// message [Item] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_GainItem] begin
func (m *S2C_GainItem) ResetEx() {

	for _, i := range m.Items {
		Put_Item(i)
	}
	m.Items = []*Item{}

}

func (m S2C_GainItem) Clone() *S2C_GainItem {
	n, ok := g_S2C_GainItem_Pool.Get().(*S2C_GainItem)
	if !ok || n == nil {
		n = &S2C_GainItem{}
	}

	if len(m.Items) > 0 {
		for _, i := range m.Items {
			if i != nil {
				n.Items = append(n.Items, i.Clone())
			} else {
				n.Items = append(n.Items, nil)
			}
		}
	} else {
		n.Items = []*Item{}
	}

	return n
}

func Clone_S2C_GainItem_Slice(dst []*S2C_GainItem, src []*S2C_GainItem) []*S2C_GainItem {
	for _, i := range dst {
		Put_S2C_GainItem(i)
	}
	dst = []*S2C_GainItem{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func (S2C_GainItem) V2() {
}

func (S2C_GainItem) MessageID() protocol.MessageID {
	return "msg.S2C_GainItem"
}

func S2C_GainItem_MessageID() protocol.MessageID {
	return "msg.S2C_GainItem"
}

func New_S2C_GainItem() *S2C_GainItem {
	m := &S2C_GainItem{
		Items: []*Item{},
	}
	return m
}

var g_S2C_GainItem_Pool = sync.Pool{}

func Get_S2C_GainItem() *S2C_GainItem {
	m, ok := g_S2C_GainItem_Pool.Get().(*S2C_GainItem)
	if !ok {
		m = New_S2C_GainItem()
	} else {
		if m == nil {
			m = New_S2C_GainItem()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_GainItem(i interface{}) {
	if m, ok := i.(*S2C_GainItem); ok && m != nil {
		g_S2C_GainItem_Pool.Put(i)
	}
}

func init() {
	Protocol.Register(
		&S2C_GainItem{},
		func() protocol.IMessage { return Get_S2C_GainItem() },
		func(msg protocol.IMessage) { Put_S2C_GainItem(msg) },
	)
}

// message [S2C_GainItem] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_LostItem] begin
func (m *S2C_LostItem) ResetEx() {
	m.IDs = []string{}

}

func (m S2C_LostItem) Clone() *S2C_LostItem {
	n, ok := g_S2C_LostItem_Pool.Get().(*S2C_LostItem)
	if !ok || n == nil {
		n = &S2C_LostItem{}
	}

	if len(m.IDs) > 0 {
		n.IDs = make([]string, len(m.IDs))
		copy(n.IDs, m.IDs)
	} else {
		n.IDs = []string{}
	}

	return n
}

func Clone_S2C_LostItem_Slice(dst []*S2C_LostItem, src []*S2C_LostItem) []*S2C_LostItem {
	for _, i := range dst {
		Put_S2C_LostItem(i)
	}
	dst = []*S2C_LostItem{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func (S2C_LostItem) V2() {
}

func (S2C_LostItem) MessageID() protocol.MessageID {
	return "msg.S2C_LostItem"
}

func S2C_LostItem_MessageID() protocol.MessageID {
	return "msg.S2C_LostItem"
}

func New_S2C_LostItem() *S2C_LostItem {
	m := &S2C_LostItem{
		IDs: []string{},
	}
	return m
}

var g_S2C_LostItem_Pool = sync.Pool{}

func Get_S2C_LostItem() *S2C_LostItem {
	m, ok := g_S2C_LostItem_Pool.Get().(*S2C_LostItem)
	if !ok {
		m = New_S2C_LostItem()
	} else {
		if m == nil {
			m = New_S2C_LostItem()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_LostItem(i interface{}) {
	if m, ok := i.(*S2C_LostItem); ok && m != nil {
		g_S2C_LostItem_Pool.Put(i)
	}
}

func init() {
	Protocol.Register(
		&S2C_LostItem{},
		func() protocol.IMessage { return Get_S2C_LostItem() },
		func(msg protocol.IMessage) { Put_S2C_LostItem(msg) },
	)
}

// message [S2C_LostItem] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_UpdateItem] begin
func (m *S2C_UpdateItem) ResetEx() {

	for _, i := range m.Items {
		Put_Item(i)
	}
	m.Items = []*Item{}

}

func (m S2C_UpdateItem) Clone() *S2C_UpdateItem {
	n, ok := g_S2C_UpdateItem_Pool.Get().(*S2C_UpdateItem)
	if !ok || n == nil {
		n = &S2C_UpdateItem{}
	}

	if len(m.Items) > 0 {
		for _, i := range m.Items {
			if i != nil {
				n.Items = append(n.Items, i.Clone())
			} else {
				n.Items = append(n.Items, nil)
			}
		}
	} else {
		n.Items = []*Item{}
	}

	return n
}

func Clone_S2C_UpdateItem_Slice(dst []*S2C_UpdateItem, src []*S2C_UpdateItem) []*S2C_UpdateItem {
	for _, i := range dst {
		Put_S2C_UpdateItem(i)
	}
	dst = []*S2C_UpdateItem{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func (S2C_UpdateItem) V2() {
}

func (S2C_UpdateItem) MessageID() protocol.MessageID {
	return "msg.S2C_UpdateItem"
}

func S2C_UpdateItem_MessageID() protocol.MessageID {
	return "msg.S2C_UpdateItem"
}

func New_S2C_UpdateItem() *S2C_UpdateItem {
	m := &S2C_UpdateItem{
		Items: []*Item{},
	}
	return m
}

var g_S2C_UpdateItem_Pool = sync.Pool{}

func Get_S2C_UpdateItem() *S2C_UpdateItem {
	m, ok := g_S2C_UpdateItem_Pool.Get().(*S2C_UpdateItem)
	if !ok {
		m = New_S2C_UpdateItem()
	} else {
		if m == nil {
			m = New_S2C_UpdateItem()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_UpdateItem(i interface{}) {
	if m, ok := i.(*S2C_UpdateItem); ok && m != nil {
		g_S2C_UpdateItem_Pool.Put(i)
	}
}

func init() {
	Protocol.Register(
		&S2C_UpdateItem{},
		func() protocol.IMessage { return Get_S2C_UpdateItem() },
		func(msg protocol.IMessage) { Put_S2C_UpdateItem(msg) },
	)
}

// message [S2C_UpdateItem] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_UseItem] begin
func (m *C2S_UseItem) ResetEx() {
	m.TID = 0
	m.Num = 0

}

func (m C2S_UseItem) Clone() *C2S_UseItem {
	n, ok := g_C2S_UseItem_Pool.Get().(*C2S_UseItem)
	if !ok || n == nil {
		n = &C2S_UseItem{}
	}

	n.TID = m.TID
	n.Num = m.Num

	return n
}

func Clone_C2S_UseItem_Slice(dst []*C2S_UseItem, src []*C2S_UseItem) []*C2S_UseItem {
	for _, i := range dst {
		Put_C2S_UseItem(i)
	}
	dst = []*C2S_UseItem{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func (C2S_UseItem) V2() {
}

func (C2S_UseItem) MessageID() protocol.MessageID {
	return "msg.C2S_UseItem"
}

func C2S_UseItem_MessageID() protocol.MessageID {
	return "msg.C2S_UseItem"
}

func New_C2S_UseItem() *C2S_UseItem {
	m := &C2S_UseItem{}
	return m
}

var g_C2S_UseItem_Pool = sync.Pool{}

func Get_C2S_UseItem() *C2S_UseItem {
	m, ok := g_C2S_UseItem_Pool.Get().(*C2S_UseItem)
	if !ok {
		m = New_C2S_UseItem()
	} else {
		if m == nil {
			m = New_C2S_UseItem()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_UseItem(i interface{}) {
	if m, ok := i.(*C2S_UseItem); ok && m != nil {
		g_C2S_UseItem_Pool.Put(i)
	}
}

func init() {
	Protocol.Register(
		&C2S_UseItem{},
		func() protocol.IMessage { return Get_C2S_UseItem() },
		func(msg protocol.IMessage) { Put_C2S_UseItem(msg) },
	)
}

// message [C2S_UseItem] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
