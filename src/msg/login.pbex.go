// Code generated by protoc-gen-pbex-go. DO NOT EDIT IT!!!
// source: login.proto

package msg

import (
	json "encoding/json"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [S2C_Login_E_Error] begin

var S2C_Login_E_Error_Slice = []int32{
	0,
	1,
	2,
}

func S2C_Login_E_Error_Len() int {
	return len(S2C_Login_E_Error_Slice)
}

func Check_S2C_Login_E_Error_I(value int32) bool {
	if _, ok := S2C_Login_E_Error_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_S2C_Login_E_Error(value S2C_Login_E_Error) bool {
	return Check_S2C_Login_E_Error_I(int32(value))
}

func Each_S2C_Login_E_Error(f func(S2C_Login_E_Error) bool) {
	for _, value := range S2C_Login_E_Error_Slice {
		if !f(S2C_Login_E_Error(value)) {
			break
		}
	}
}

func Each_S2C_Login_E_Error_I(f func(int32) bool) {
	for _, value := range S2C_Login_E_Error_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [S2C_Login_E_Error] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_Login] begin
func (m *C2S_Login) ResetEx() {

	m.UserId = ""

	m.VerifyCode = ""

}

func (m C2S_Login) Clone() *C2S_Login {
	n, ok := g_C2S_Login_Pool.Get().(*C2S_Login)
	if !ok || n == nil {
		n = &C2S_Login{}
	}

	n.UserId = m.UserId

	n.VerifyCode = m.VerifyCode

	return n
}

func Clone_C2S_Login_Slice(dst []*C2S_Login, src []*C2S_Login) []*C2S_Login {
	for _, i := range dst {
		Put_C2S_Login(i)
	}
	if len(src) > 0 {
		dst = make([]*C2S_Login, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*C2S_Login{}
		dst = nil
	}
	return dst
}

func (m C2S_Login) JsonString() string {
	ba, _ := json.Marshal(m)
	return "C2S_Login:" + string(ba)
}

func New_C2S_Login() *C2S_Login {
	m := &C2S_Login{}
	return m
}

var g_C2S_Login_Pool = sync.Pool{}

func Get_C2S_Login() *C2S_Login {
	m, ok := g_C2S_Login_Pool.Get().(*C2S_Login)
	if !ok {
		m = New_C2S_Login()
	} else {
		if m == nil {
			m = New_C2S_Login()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_Login(i interface{}) {
	if m, ok := i.(*C2S_Login); ok && m != nil {
		g_C2S_Login_Pool.Put(i)
	}
}

// message [C2S_Login] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_Login] begin
func (m *S2C_Login) ResetEx() {

	m.Err = 0

}

func (m S2C_Login) Clone() *S2C_Login {
	n, ok := g_S2C_Login_Pool.Get().(*S2C_Login)
	if !ok || n == nil {
		n = &S2C_Login{}
	}

	n.Err = m.Err

	return n
}

func Clone_S2C_Login_Slice(dst []*S2C_Login, src []*S2C_Login) []*S2C_Login {
	for _, i := range dst {
		Put_S2C_Login(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_Login, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_Login{}
		dst = nil
	}
	return dst
}

func (m S2C_Login) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_Login:" + string(ba)
}

func New_S2C_Login() *S2C_Login {
	m := &S2C_Login{}
	return m
}

var g_S2C_Login_Pool = sync.Pool{}

func Get_S2C_Login() *S2C_Login {
	m, ok := g_S2C_Login_Pool.Get().(*S2C_Login)
	if !ok {
		m = New_S2C_Login()
	} else {
		if m == nil {
			m = New_S2C_Login()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_Login(i interface{}) {
	if m, ok := i.(*S2C_Login); ok && m != nil {
		g_S2C_Login_Pool.Put(i)
	}
}

// message [S2C_Login] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
