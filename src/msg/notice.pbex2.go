// Code generated by protoc-gen-pbex2-go. DO NOT EDIT IT!!!
// source: notice.proto

/*
It has these top-level messages:
	Notice
	C2S_GetNotices
	S2C_GetNotices
*/

package msg

import "sync"
import protocol "github.com/trist725/mgsu/network/protocol/protobuf/v2"

var _ *sync.Pool
var _ = protocol.PH

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [Notice] begin
func (m *Notice) ResetEx() {
	m.Type = 0
	m.Name = ""
	m.Title = ""
	m.Content = ""

}

func (m Notice) Clone() *Notice {
	n, ok := g_Notice_Pool.Get().(*Notice)
	if !ok || n == nil {
		n = &Notice{}
	}

	n.Type = m.Type
	n.Name = m.Name
	n.Title = m.Title
	n.Content = m.Content

	return n
}

func Clone_Notice_Slice(dst []*Notice, src []*Notice) []*Notice {
	for _, i := range dst {
		Put_Notice(i)
	}
	dst = []*Notice{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_Notice() *Notice {
	m := &Notice{}
	return m
}

var g_Notice_Pool = sync.Pool{}

func Get_Notice() *Notice {
	m, ok := g_Notice_Pool.Get().(*Notice)
	if !ok {
		m = New_Notice()
	} else {
		if m == nil {
			m = New_Notice()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_Notice(i interface{}) {
	if m, ok := i.(*Notice); ok && m != nil {
		g_Notice_Pool.Put(i)
	}
}

// message [Notice] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_GetNotices] begin
func (m *C2S_GetNotices) ResetEx() {

}

func (m C2S_GetNotices) Clone() *C2S_GetNotices {
	n, ok := g_C2S_GetNotices_Pool.Get().(*C2S_GetNotices)
	if !ok || n == nil {
		n = &C2S_GetNotices{}
	}

	return n
}

func Clone_C2S_GetNotices_Slice(dst []*C2S_GetNotices, src []*C2S_GetNotices) []*C2S_GetNotices {
	for _, i := range dst {
		Put_C2S_GetNotices(i)
	}
	dst = []*C2S_GetNotices{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_C2S_GetNotices() *C2S_GetNotices {
	m := &C2S_GetNotices{}
	return m
}

var g_C2S_GetNotices_Pool = sync.Pool{}

func Get_C2S_GetNotices() *C2S_GetNotices {
	m, ok := g_C2S_GetNotices_Pool.Get().(*C2S_GetNotices)
	if !ok {
		m = New_C2S_GetNotices()
	} else {
		if m == nil {
			m = New_C2S_GetNotices()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_GetNotices(i interface{}) {
	if m, ok := i.(*C2S_GetNotices); ok && m != nil {
		g_C2S_GetNotices_Pool.Put(i)
	}
}

// message [C2S_GetNotices] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_GetNotices] begin
func (m *S2C_GetNotices) ResetEx() {

	for _, i := range m.Notices {
		Put_Notice(i)
	}
	m.Notices = []*Notice{}

}

func (m S2C_GetNotices) Clone() *S2C_GetNotices {
	n, ok := g_S2C_GetNotices_Pool.Get().(*S2C_GetNotices)
	if !ok || n == nil {
		n = &S2C_GetNotices{}
	}

	if len(m.Notices) > 0 {
		for _, i := range m.Notices {
			if i != nil {
				n.Notices = append(n.Notices, i.Clone())
			} else {
				n.Notices = append(n.Notices, nil)
			}
		}
	} else {
		n.Notices = []*Notice{}
	}

	return n
}

func Clone_S2C_GetNotices_Slice(dst []*S2C_GetNotices, src []*S2C_GetNotices) []*S2C_GetNotices {
	for _, i := range dst {
		Put_S2C_GetNotices(i)
	}
	dst = []*S2C_GetNotices{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_S2C_GetNotices() *S2C_GetNotices {
	m := &S2C_GetNotices{
		Notices: []*Notice{},
	}
	return m
}

var g_S2C_GetNotices_Pool = sync.Pool{}

func Get_S2C_GetNotices() *S2C_GetNotices {
	m, ok := g_S2C_GetNotices_Pool.Get().(*S2C_GetNotices)
	if !ok {
		m = New_S2C_GetNotices()
	} else {
		if m == nil {
			m = New_S2C_GetNotices()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_GetNotices(i interface{}) {
	if m, ok := i.(*S2C_GetNotices); ok && m != nil {
		g_S2C_GetNotices_Pool.Put(i)
	}
}

// message [S2C_GetNotices] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
