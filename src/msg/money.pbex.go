// Code generated by protoc-gen-pbex-go. DO NOT EDIT IT!!!
// source: money.proto

package msg

import (
	json "encoding/json"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [Money] begin
func (m *Money) ResetEx() {

	m.Type = 0

	m.Num = 0

}

func (m Money) Clone() *Money {
	n, ok := g_Money_Pool.Get().(*Money)
	if !ok || n == nil {
		n = &Money{}
	}

	n.Type = m.Type

	n.Num = m.Num

	return n
}

func Clone_Money_Slice(dst []*Money, src []*Money) []*Money {
	for _, i := range dst {
		Put_Money(i)
	}
	if len(src) > 0 {
		dst = make([]*Money, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*Money{}
		dst = nil
	}
	return dst
}

func (m Money) JsonString() string {
	ba, _ := json.Marshal(m)
	return "Money:" + string(ba)
}

func New_Money() *Money {
	m := &Money{}
	return m
}

var g_Money_Pool = sync.Pool{}

func Get_Money() *Money {
	m, ok := g_Money_Pool.Get().(*Money)
	if !ok {
		m = New_Money()
	} else {
		if m == nil {
			m = New_Money()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_Money(i interface{}) {
	if m, ok := i.(*Money); ok && m != nil {
		g_Money_Pool.Put(i)
	}
}

// message [Money] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_UpdateMoney] begin
func (m *S2C_UpdateMoney) ResetEx() {

	for _, i := range m.Monies {
		Put_Money(i)
	}

	//m.Monies = []*Money{}
	m.Monies = nil

}

func (m S2C_UpdateMoney) Clone() *S2C_UpdateMoney {
	n, ok := g_S2C_UpdateMoney_Pool.Get().(*S2C_UpdateMoney)
	if !ok || n == nil {
		n = &S2C_UpdateMoney{}
	}

	if len(m.Monies) > 0 {
		n.Monies = make([]*Money, len(m.Monies))
		for i, e := range m.Monies {

			if e != nil {
				n.Monies[i] = e.Clone()
			}

		}
	} else {
		//n.Monies = []*Money{}
		n.Monies = nil
	}

	return n
}

func Clone_S2C_UpdateMoney_Slice(dst []*S2C_UpdateMoney, src []*S2C_UpdateMoney) []*S2C_UpdateMoney {
	for _, i := range dst {
		Put_S2C_UpdateMoney(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_UpdateMoney, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_UpdateMoney{}
		dst = nil
	}
	return dst
}

func (m S2C_UpdateMoney) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_UpdateMoney:" + string(ba)
}

func New_S2C_UpdateMoney() *S2C_UpdateMoney {
	m := &S2C_UpdateMoney{}
	return m
}

var g_S2C_UpdateMoney_Pool = sync.Pool{}

func Get_S2C_UpdateMoney() *S2C_UpdateMoney {
	m, ok := g_S2C_UpdateMoney_Pool.Get().(*S2C_UpdateMoney)
	if !ok {
		m = New_S2C_UpdateMoney()
	} else {
		if m == nil {
			m = New_S2C_UpdateMoney()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_UpdateMoney(i interface{}) {
	if m, ok := i.(*S2C_UpdateMoney); ok && m != nil {
		g_S2C_UpdateMoney_Pool.Put(i)
	}
}

// message [S2C_UpdateMoney] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
