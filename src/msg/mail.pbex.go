// Code generated by protoc-gen-pbex-go. DO NOT EDIT IT!!!
// source: mail.proto

package msg

import (
	json "encoding/json"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [S2C_GetMailReward_E_Err] begin

var S2C_GetMailReward_E_Err_Slice = []int32{
	0,
	1,
	2,
	3,
}

func S2C_GetMailReward_E_Err_Len() int {
	return len(S2C_GetMailReward_E_Err_Slice)
}

func Check_S2C_GetMailReward_E_Err_I(value int32) bool {
	if _, ok := S2C_GetMailReward_E_Err_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_S2C_GetMailReward_E_Err(value S2C_GetMailReward_E_Err) bool {
	return Check_S2C_GetMailReward_E_Err_I(int32(value))
}

func Each_S2C_GetMailReward_E_Err(f func(S2C_GetMailReward_E_Err) bool) {
	for _, value := range S2C_GetMailReward_E_Err_Slice {
		if !f(S2C_GetMailReward_E_Err(value)) {
			break
		}
	}
}

func Each_S2C_GetMailReward_E_Err_I(f func(int32) bool) {
	for _, value := range S2C_GetMailReward_E_Err_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [S2C_GetMailReward_E_Err] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [Mail] begin
func (m *Mail) ResetEx() {

	m.Id = 0

	m.RewardType = 0

	m.RewardNum = 0

	m.Content = ""

}

func (m Mail) Clone() *Mail {
	n, ok := g_Mail_Pool.Get().(*Mail)
	if !ok || n == nil {
		n = &Mail{}
	}

	n.Id = m.Id

	n.RewardType = m.RewardType

	n.RewardNum = m.RewardNum

	n.Content = m.Content

	return n
}

func Clone_Mail_Slice(dst []*Mail, src []*Mail) []*Mail {
	for _, i := range dst {
		Put_Mail(i)
	}
	if len(src) > 0 {
		dst = make([]*Mail, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*Mail{}
		dst = nil
	}
	return dst
}

func (m Mail) JsonString() string {
	ba, _ := json.Marshal(m)
	return "Mail:" + string(ba)
}

func New_Mail() *Mail {
	m := &Mail{}
	return m
}

var g_Mail_Pool = sync.Pool{}

func Get_Mail() *Mail {
	m, ok := g_Mail_Pool.Get().(*Mail)
	if !ok {
		m = New_Mail()
	} else {
		if m == nil {
			m = New_Mail()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_Mail(i interface{}) {
	if m, ok := i.(*Mail); ok && m != nil {
		g_Mail_Pool.Put(i)
	}
}

// message [Mail] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_GetMailList] begin
func (m *C2S_GetMailList) ResetEx() {

}

func (m C2S_GetMailList) Clone() *C2S_GetMailList {
	n, ok := g_C2S_GetMailList_Pool.Get().(*C2S_GetMailList)
	if !ok || n == nil {
		n = &C2S_GetMailList{}
	}

	return n
}

func Clone_C2S_GetMailList_Slice(dst []*C2S_GetMailList, src []*C2S_GetMailList) []*C2S_GetMailList {
	for _, i := range dst {
		Put_C2S_GetMailList(i)
	}
	if len(src) > 0 {
		dst = make([]*C2S_GetMailList, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*C2S_GetMailList{}
		dst = nil
	}
	return dst
}

func (m C2S_GetMailList) JsonString() string {
	ba, _ := json.Marshal(m)
	return "C2S_GetMailList:" + string(ba)
}

func New_C2S_GetMailList() *C2S_GetMailList {
	m := &C2S_GetMailList{}
	return m
}

var g_C2S_GetMailList_Pool = sync.Pool{}

func Get_C2S_GetMailList() *C2S_GetMailList {
	m, ok := g_C2S_GetMailList_Pool.Get().(*C2S_GetMailList)
	if !ok {
		m = New_C2S_GetMailList()
	} else {
		if m == nil {
			m = New_C2S_GetMailList()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_GetMailList(i interface{}) {
	if m, ok := i.(*C2S_GetMailList); ok && m != nil {
		g_C2S_GetMailList_Pool.Put(i)
	}
}

// message [C2S_GetMailList] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_GetMailList] begin
func (m *S2C_GetMailList) ResetEx() {

	for _, i := range m.Mails {
		Put_Mail(i)
	}

	//m.Mails = []*Mail{}
	m.Mails = nil

}

func (m S2C_GetMailList) Clone() *S2C_GetMailList {
	n, ok := g_S2C_GetMailList_Pool.Get().(*S2C_GetMailList)
	if !ok || n == nil {
		n = &S2C_GetMailList{}
	}

	if len(m.Mails) > 0 {
		n.Mails = make([]*Mail, len(m.Mails))
		for i, e := range m.Mails {

			if e != nil {
				n.Mails[i] = e.Clone()
			}

		}
	} else {
		//n.Mails = []*Mail{}
		n.Mails = nil
	}

	return n
}

func Clone_S2C_GetMailList_Slice(dst []*S2C_GetMailList, src []*S2C_GetMailList) []*S2C_GetMailList {
	for _, i := range dst {
		Put_S2C_GetMailList(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_GetMailList, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_GetMailList{}
		dst = nil
	}
	return dst
}

func (m S2C_GetMailList) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_GetMailList:" + string(ba)
}

func New_S2C_GetMailList() *S2C_GetMailList {
	m := &S2C_GetMailList{}
	return m
}

var g_S2C_GetMailList_Pool = sync.Pool{}

func Get_S2C_GetMailList() *S2C_GetMailList {
	m, ok := g_S2C_GetMailList_Pool.Get().(*S2C_GetMailList)
	if !ok {
		m = New_S2C_GetMailList()
	} else {
		if m == nil {
			m = New_S2C_GetMailList()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_GetMailList(i interface{}) {
	if m, ok := i.(*S2C_GetMailList); ok && m != nil {
		g_S2C_GetMailList_Pool.Put(i)
	}
}

// message [S2C_GetMailList] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_GetMailReward] begin
func (m *C2S_GetMailReward) ResetEx() {

	m.Id = 0

}

func (m C2S_GetMailReward) Clone() *C2S_GetMailReward {
	n, ok := g_C2S_GetMailReward_Pool.Get().(*C2S_GetMailReward)
	if !ok || n == nil {
		n = &C2S_GetMailReward{}
	}

	n.Id = m.Id

	return n
}

func Clone_C2S_GetMailReward_Slice(dst []*C2S_GetMailReward, src []*C2S_GetMailReward) []*C2S_GetMailReward {
	for _, i := range dst {
		Put_C2S_GetMailReward(i)
	}
	if len(src) > 0 {
		dst = make([]*C2S_GetMailReward, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*C2S_GetMailReward{}
		dst = nil
	}
	return dst
}

func (m C2S_GetMailReward) JsonString() string {
	ba, _ := json.Marshal(m)
	return "C2S_GetMailReward:" + string(ba)
}

func New_C2S_GetMailReward() *C2S_GetMailReward {
	m := &C2S_GetMailReward{}
	return m
}

var g_C2S_GetMailReward_Pool = sync.Pool{}

func Get_C2S_GetMailReward() *C2S_GetMailReward {
	m, ok := g_C2S_GetMailReward_Pool.Get().(*C2S_GetMailReward)
	if !ok {
		m = New_C2S_GetMailReward()
	} else {
		if m == nil {
			m = New_C2S_GetMailReward()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_GetMailReward(i interface{}) {
	if m, ok := i.(*C2S_GetMailReward); ok && m != nil {
		g_C2S_GetMailReward_Pool.Put(i)
	}
}

// message [C2S_GetMailReward] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_GetMailReward] begin
func (m *S2C_GetMailReward) ResetEx() {

	m.Id = 0

	m.Err = 0

}

func (m S2C_GetMailReward) Clone() *S2C_GetMailReward {
	n, ok := g_S2C_GetMailReward_Pool.Get().(*S2C_GetMailReward)
	if !ok || n == nil {
		n = &S2C_GetMailReward{}
	}

	n.Id = m.Id

	n.Err = m.Err

	return n
}

func Clone_S2C_GetMailReward_Slice(dst []*S2C_GetMailReward, src []*S2C_GetMailReward) []*S2C_GetMailReward {
	for _, i := range dst {
		Put_S2C_GetMailReward(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_GetMailReward, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_GetMailReward{}
		dst = nil
	}
	return dst
}

func (m S2C_GetMailReward) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_GetMailReward:" + string(ba)
}

func New_S2C_GetMailReward() *S2C_GetMailReward {
	m := &S2C_GetMailReward{}
	return m
}

var g_S2C_GetMailReward_Pool = sync.Pool{}

func Get_S2C_GetMailReward() *S2C_GetMailReward {
	m, ok := g_S2C_GetMailReward_Pool.Get().(*S2C_GetMailReward)
	if !ok {
		m = New_S2C_GetMailReward()
	} else {
		if m == nil {
			m = New_S2C_GetMailReward()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_GetMailReward(i interface{}) {
	if m, ok := i.(*S2C_GetMailReward); ok && m != nil {
		g_S2C_GetMailReward_Pool.Put(i)
	}
}

// message [S2C_GetMailReward] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_GetAllMailReward] begin
func (m *C2S_GetAllMailReward) ResetEx() {

}

func (m C2S_GetAllMailReward) Clone() *C2S_GetAllMailReward {
	n, ok := g_C2S_GetAllMailReward_Pool.Get().(*C2S_GetAllMailReward)
	if !ok || n == nil {
		n = &C2S_GetAllMailReward{}
	}

	return n
}

func Clone_C2S_GetAllMailReward_Slice(dst []*C2S_GetAllMailReward, src []*C2S_GetAllMailReward) []*C2S_GetAllMailReward {
	for _, i := range dst {
		Put_C2S_GetAllMailReward(i)
	}
	if len(src) > 0 {
		dst = make([]*C2S_GetAllMailReward, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*C2S_GetAllMailReward{}
		dst = nil
	}
	return dst
}

func (m C2S_GetAllMailReward) JsonString() string {
	ba, _ := json.Marshal(m)
	return "C2S_GetAllMailReward:" + string(ba)
}

func New_C2S_GetAllMailReward() *C2S_GetAllMailReward {
	m := &C2S_GetAllMailReward{}
	return m
}

var g_C2S_GetAllMailReward_Pool = sync.Pool{}

func Get_C2S_GetAllMailReward() *C2S_GetAllMailReward {
	m, ok := g_C2S_GetAllMailReward_Pool.Get().(*C2S_GetAllMailReward)
	if !ok {
		m = New_C2S_GetAllMailReward()
	} else {
		if m == nil {
			m = New_C2S_GetAllMailReward()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_GetAllMailReward(i interface{}) {
	if m, ok := i.(*C2S_GetAllMailReward); ok && m != nil {
		g_C2S_GetAllMailReward_Pool.Put(i)
	}
}

// message [C2S_GetAllMailReward] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_GetAllMailReward] begin
func (m *S2C_GetAllMailReward) ResetEx() {

	//m.Ids = []string{}
	m.Ids = nil

}

func (m S2C_GetAllMailReward) Clone() *S2C_GetAllMailReward {
	n, ok := g_S2C_GetAllMailReward_Pool.Get().(*S2C_GetAllMailReward)
	if !ok || n == nil {
		n = &S2C_GetAllMailReward{}
	}

	if len(m.Ids) > 0 {
		n.Ids = make([]string, len(m.Ids))
		copy(n.Ids, m.Ids)
	} else {
		//n.Ids = []string{}
		n.Ids = nil
	}

	return n
}

func Clone_S2C_GetAllMailReward_Slice(dst []*S2C_GetAllMailReward, src []*S2C_GetAllMailReward) []*S2C_GetAllMailReward {
	for _, i := range dst {
		Put_S2C_GetAllMailReward(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_GetAllMailReward, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_GetAllMailReward{}
		dst = nil
	}
	return dst
}

func (m S2C_GetAllMailReward) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_GetAllMailReward:" + string(ba)
}

func New_S2C_GetAllMailReward() *S2C_GetAllMailReward {
	m := &S2C_GetAllMailReward{}
	return m
}

var g_S2C_GetAllMailReward_Pool = sync.Pool{}

func Get_S2C_GetAllMailReward() *S2C_GetAllMailReward {
	m, ok := g_S2C_GetAllMailReward_Pool.Get().(*S2C_GetAllMailReward)
	if !ok {
		m = New_S2C_GetAllMailReward()
	} else {
		if m == nil {
			m = New_S2C_GetAllMailReward()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_GetAllMailReward(i interface{}) {
	if m, ok := i.(*S2C_GetAllMailReward); ok && m != nil {
		g_S2C_GetAllMailReward_Pool.Put(i)
	}
}

// message [S2C_GetAllMailReward] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
