// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Hall.proto

package msg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// /登陆类型
type C2S_Login_E_LoginType int32

const (
	// 微信登陆
	C2S_Login_E_LoginType_WeChat C2S_Login_E_LoginType = 0
	// 游客登陆
	C2S_Login_E_LoginType_Guest C2S_Login_E_LoginType = 1
)

var C2S_Login_E_LoginType_name = map[int32]string{
	0: "E_LoginType_WeChat",
	1: "E_LoginType_Guest",
}
var C2S_Login_E_LoginType_value = map[string]int32{
	"E_LoginType_WeChat": 0,
	"E_LoginType_Guest":  1,
}

func (x C2S_Login_E_LoginType) String() string {
	return proto.EnumName(C2S_Login_E_LoginType_name, int32(x))
}
func (C2S_Login_E_LoginType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Hall_2963e4a8957963de, []int{0, 0}
}

type S2C_Login_E_ErrReason int32

const (
	// /保留
	S2C_Login_E_ErrReason_ S2C_Login_E_ErrReason = 0
	// /成功登陆,将下发数据
	S2C_Login_E_Err_LoginSuccess S2C_Login_E_ErrReason = 1
	// /成功创建新账号,读表获取初始数据
	S2C_Login_E_Err_NewAccount S2C_Login_E_ErrReason = 2
	// /登陆信息不匹配,登陆失败
	S2C_Login_E_Err_LoginInfoNotMatch S2C_Login_E_ErrReason = 3
	// /验证通过,允许登陆,但登陆地点异常警告
	S2C_Login_E_Err_LocationWarn S2C_Login_E_ErrReason = 4
	// /用户不存在
	S2C_Login_E_Err_UserNotExist S2C_Login_E_ErrReason = 5
	// /已登陆
	S2C_Login_E_Err_AlreadyLogin S2C_Login_E_ErrReason = 6
	// /其它错误
	S2C_Login_E_Err_Unknown S2C_Login_E_ErrReason = 7
)

var S2C_Login_E_ErrReason_name = map[int32]string{
	0: "E_ErrReason_",
	1: "E_Err_LoginSuccess",
	2: "E_Err_NewAccount",
	3: "E_Err_LoginInfoNotMatch",
	4: "E_Err_LocationWarn",
	5: "E_Err_UserNotExist",
	6: "E_Err_AlreadyLogin",
	7: "E_Err_Unknown",
}
var S2C_Login_E_ErrReason_value = map[string]int32{
	"E_ErrReason_":            0,
	"E_Err_LoginSuccess":      1,
	"E_Err_NewAccount":        2,
	"E_Err_LoginInfoNotMatch": 3,
	"E_Err_LocationWarn":      4,
	"E_Err_UserNotExist":      5,
	"E_Err_AlreadyLogin":      6,
	"E_Err_Unknown":           7,
}

func (x S2C_Login_E_ErrReason) String() string {
	return proto.EnumName(S2C_Login_E_ErrReason_name, int32(x))
}
func (S2C_Login_E_ErrReason) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Hall_2963e4a8957963de, []int{1, 0}
}

type S2C_DaySign_E_Err_DaySign int32

const (
	// /保留
	S2C_DaySign_E_ErrReason_ S2C_DaySign_E_Err_DaySign = 0
	// /成功签到
	S2C_DaySign_E_Err_Success S2C_DaySign_E_Err_DaySign = 1
	// /今日已签到
	S2C_DaySign_E_Err_AlreadySign S2C_DaySign_E_Err_DaySign = 2
	// /其它错误
	S2C_DaySign_E_Err_Unknown S2C_DaySign_E_Err_DaySign = 6
)

var S2C_DaySign_E_Err_DaySign_name = map[int32]string{
	0: "E_ErrReason_",
	1: "E_Err_Success",
	2: "E_Err_AlreadySign",
	6: "E_Err_Unknown",
}
var S2C_DaySign_E_Err_DaySign_value = map[string]int32{
	"E_ErrReason_":      0,
	"E_Err_Success":     1,
	"E_Err_AlreadySign": 2,
	"E_Err_Unknown":     6,
}

func (x S2C_DaySign_E_Err_DaySign) String() string {
	return proto.EnumName(S2C_DaySign_E_Err_DaySign_name, int32(x))
}
func (S2C_DaySign_E_Err_DaySign) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_Hall_2963e4a8957963de, []int{4, 0}
}

// /登陆请求
// @msg
type C2S_Login struct {
	// /微信登陆时是微信uid,游客登陆时是手机唯一标识
	UID string `protobuf:"bytes,1,opt,name=UID,proto3" json:"UID,omitempty"`
	// /用户昵称
	NickName string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	// /用户头像url
	AvatarURL string `protobuf:"bytes,3,opt,name=AvatarURL,proto3" json:"AvatarURL,omitempty"`
	// /性别
	Sex string `protobuf:"bytes,4,opt,name=sex,proto3" json:"sex,omitempty"`
	// 微信登陆传openid，游客登陆传空
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// /地理位置
	Location  string                `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
	Logintype C2S_Login_E_LoginType `protobuf:"varint,7,opt,name=logintype,proto3,enum=msg.C2S_Login_E_LoginType" json:"logintype,omitempty"`
}

func (m *C2S_Login) Reset()         { *m = C2S_Login{} }
func (m *C2S_Login) String() string { return proto.CompactTextString(m) }
func (*C2S_Login) ProtoMessage()    {}
func (*C2S_Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_Hall_2963e4a8957963de, []int{0}
}
func (m *C2S_Login) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_Login.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *C2S_Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_Login.Merge(dst, src)
}
func (m *C2S_Login) XXX_Size() int {
	return m.Size()
}
func (m *C2S_Login) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_Login.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_Login proto.InternalMessageInfo

func (m *C2S_Login) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *C2S_Login) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *C2S_Login) GetAvatarURL() string {
	if m != nil {
		return m.AvatarURL
	}
	return ""
}

func (m *C2S_Login) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *C2S_Login) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *C2S_Login) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *C2S_Login) GetLogintype() C2S_Login_E_LoginType {
	if m != nil {
		return m.Logintype
	}
	return C2S_Login_E_LoginType_WeChat
}

// /登陆回复
// @msg
type S2C_Login struct {
	Reason S2C_Login_E_ErrReason `protobuf:"varint,1,opt,name=reason,proto3,enum=msg.S2C_Login_E_ErrReason" json:"reason,omitempty"`
}

func (m *S2C_Login) Reset()         { *m = S2C_Login{} }
func (m *S2C_Login) String() string { return proto.CompactTextString(m) }
func (*S2C_Login) ProtoMessage()    {}
func (*S2C_Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_Hall_2963e4a8957963de, []int{1}
}
func (m *S2C_Login) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_Login.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S2C_Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_Login.Merge(dst, src)
}
func (m *S2C_Login) XXX_Size() int {
	return m.Size()
}
func (m *S2C_Login) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_Login.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_Login proto.InternalMessageInfo

func (m *S2C_Login) GetReason() S2C_Login_E_ErrReason {
	if m != nil {
		return m.Reason
	}
	return S2C_Login_E_ErrReason_
}

// /登陆成功后下发信息
// @msg
type S2C_LoginInfo struct {
	// /玩家id
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// /用户昵称
	NickName string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	// /头像url
	AvatarURL string `protobuf:"bytes,3,opt,name=AvatarURL,proto3" json:"AvatarURL,omitempty"`
	// /货币信息
	Monies []*Money `protobuf:"bytes,4,rep,name=Monies" json:"Monies,omitempty"`
	// /今日是否已签到
	DaySigned bool `protobuf:"varint,5,opt,name=DaySigned,proto3" json:"DaySigned,omitempty"`
	// /已签到天数
	SignedDays int32 `protobuf:"varint,6,opt,name=SignedDays,proto3" json:"SignedDays,omitempty"`
	// /每日签到奖励,数组第几个代表第几天
	SignRewards []*Item `protobuf:"bytes,7,rep,name=SignRewards" json:"SignRewards,omitempty"`
}

func (m *S2C_LoginInfo) Reset()         { *m = S2C_LoginInfo{} }
func (m *S2C_LoginInfo) String() string { return proto.CompactTextString(m) }
func (*S2C_LoginInfo) ProtoMessage()    {}
func (*S2C_LoginInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_Hall_2963e4a8957963de, []int{2}
}
func (m *S2C_LoginInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_LoginInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_LoginInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S2C_LoginInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_LoginInfo.Merge(dst, src)
}
func (m *S2C_LoginInfo) XXX_Size() int {
	return m.Size()
}
func (m *S2C_LoginInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_LoginInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_LoginInfo proto.InternalMessageInfo

func (m *S2C_LoginInfo) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *S2C_LoginInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *S2C_LoginInfo) GetAvatarURL() string {
	if m != nil {
		return m.AvatarURL
	}
	return ""
}

func (m *S2C_LoginInfo) GetMonies() []*Money {
	if m != nil {
		return m.Monies
	}
	return nil
}

func (m *S2C_LoginInfo) GetDaySigned() bool {
	if m != nil {
		return m.DaySigned
	}
	return false
}

func (m *S2C_LoginInfo) GetSignedDays() int32 {
	if m != nil {
		return m.SignedDays
	}
	return 0
}

func (m *S2C_LoginInfo) GetSignRewards() []*Item {
	if m != nil {
		return m.SignRewards
	}
	return nil
}

// /每日签到请求
// @msg
type C2S_DaySign struct {
	// /要签到的天数
	Day int32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
}

func (m *C2S_DaySign) Reset()         { *m = C2S_DaySign{} }
func (m *C2S_DaySign) String() string { return proto.CompactTextString(m) }
func (*C2S_DaySign) ProtoMessage()    {}
func (*C2S_DaySign) Descriptor() ([]byte, []int) {
	return fileDescriptor_Hall_2963e4a8957963de, []int{3}
}
func (m *C2S_DaySign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_DaySign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_DaySign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *C2S_DaySign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_DaySign.Merge(dst, src)
}
func (m *C2S_DaySign) XXX_Size() int {
	return m.Size()
}
func (m *C2S_DaySign) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_DaySign.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_DaySign proto.InternalMessageInfo

func (m *C2S_DaySign) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

// /每日签到回复
// @msg
type S2C_DaySign struct {
	Err S2C_DaySign_E_Err_DaySign `protobuf:"varint,1,opt,name=err,proto3,enum=msg.S2C_DaySign_E_Err_DaySign" json:"err,omitempty"`
	// /签到后的货币信息
	Monies []*Money `protobuf:"bytes,2,rep,name=Monies" json:"Monies,omitempty"`
}

func (m *S2C_DaySign) Reset()         { *m = S2C_DaySign{} }
func (m *S2C_DaySign) String() string { return proto.CompactTextString(m) }
func (*S2C_DaySign) ProtoMessage()    {}
func (*S2C_DaySign) Descriptor() ([]byte, []int) {
	return fileDescriptor_Hall_2963e4a8957963de, []int{4}
}
func (m *S2C_DaySign) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_DaySign) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_DaySign.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *S2C_DaySign) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_DaySign.Merge(dst, src)
}
func (m *S2C_DaySign) XXX_Size() int {
	return m.Size()
}
func (m *S2C_DaySign) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_DaySign.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_DaySign proto.InternalMessageInfo

func (m *S2C_DaySign) GetErr() S2C_DaySign_E_Err_DaySign {
	if m != nil {
		return m.Err
	}
	return S2C_DaySign_E_ErrReason_
}

func (m *S2C_DaySign) GetMonies() []*Money {
	if m != nil {
		return m.Monies
	}
	return nil
}

func init() {
	proto.RegisterType((*C2S_Login)(nil), "msg.C2S_Login")
	proto.RegisterType((*S2C_Login)(nil), "msg.S2C_Login")
	proto.RegisterType((*S2C_LoginInfo)(nil), "msg.S2C_LoginInfo")
	proto.RegisterType((*C2S_DaySign)(nil), "msg.C2S_DaySign")
	proto.RegisterType((*S2C_DaySign)(nil), "msg.S2C_DaySign")
	proto.RegisterEnum("msg.C2S_Login_E_LoginType", C2S_Login_E_LoginType_name, C2S_Login_E_LoginType_value)
	proto.RegisterEnum("msg.S2C_Login_E_ErrReason", S2C_Login_E_ErrReason_name, S2C_Login_E_ErrReason_value)
	proto.RegisterEnum("msg.S2C_DaySign_E_Err_DaySign", S2C_DaySign_E_Err_DaySign_name, S2C_DaySign_E_Err_DaySign_value)
}
func (m *C2S_Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_Login) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.UID)))
		i += copy(dAtA[i:], m.UID)
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.AvatarURL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.AvatarURL)))
		i += copy(dAtA[i:], m.AvatarURL)
	}
	if len(m.Sex) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.Sex)))
		i += copy(dAtA[i:], m.Sex)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Location) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	if m.Logintype != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Logintype))
	}
	return i, nil
}

func (m *S2C_Login) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_Login) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Reason != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Reason))
	}
	return i, nil
}

func (m *S2C_LoginInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_LoginInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.ID))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.AvatarURL) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHall(dAtA, i, uint64(len(m.AvatarURL)))
		i += copy(dAtA[i:], m.AvatarURL)
	}
	if len(m.Monies) > 0 {
		for _, msg := range m.Monies {
			dAtA[i] = 0x22
			i++
			i = encodeVarintHall(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DaySigned {
		dAtA[i] = 0x28
		i++
		if m.DaySigned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SignedDays != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.SignedDays))
	}
	if len(m.SignRewards) > 0 {
		for _, msg := range m.SignRewards {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintHall(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C2S_DaySign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_DaySign) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Day != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Day))
	}
	return i, nil
}

func (m *S2C_DaySign) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_DaySign) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Err != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHall(dAtA, i, uint64(m.Err))
	}
	if len(m.Monies) > 0 {
		for _, msg := range m.Monies {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHall(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintHall(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2S_Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UID)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	l = len(m.AvatarURL)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	if m.Logintype != 0 {
		n += 1 + sovHall(uint64(m.Logintype))
	}
	return n
}

func (m *S2C_Login) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reason != 0 {
		n += 1 + sovHall(uint64(m.Reason))
	}
	return n
}

func (m *S2C_LoginInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovHall(uint64(m.ID))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	l = len(m.AvatarURL)
	if l > 0 {
		n += 1 + l + sovHall(uint64(l))
	}
	if len(m.Monies) > 0 {
		for _, e := range m.Monies {
			l = e.Size()
			n += 1 + l + sovHall(uint64(l))
		}
	}
	if m.DaySigned {
		n += 2
	}
	if m.SignedDays != 0 {
		n += 1 + sovHall(uint64(m.SignedDays))
	}
	if len(m.SignRewards) > 0 {
		for _, e := range m.SignRewards {
			l = e.Size()
			n += 1 + l + sovHall(uint64(l))
		}
	}
	return n
}

func (m *C2S_DaySign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Day != 0 {
		n += 1 + sovHall(uint64(m.Day))
	}
	return n
}

func (m *S2C_DaySign) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovHall(uint64(m.Err))
	}
	if len(m.Monies) > 0 {
		for _, e := range m.Monies {
			l = e.Size()
			n += 1 + l + sovHall(uint64(l))
		}
	}
	return n
}

func sovHall(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHall(x uint64) (n int) {
	return sovHall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2S_Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logintype", wireType)
			}
			m.Logintype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Logintype |= (C2S_Login_E_LoginType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_Login) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_Login: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_Login: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (S2C_Login_E_ErrReason(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_LoginInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_LoginInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_LoginInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Monies = append(m.Monies, &Money{})
			if err := m.Monies[len(m.Monies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaySigned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DaySigned = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedDays", wireType)
			}
			m.SignedDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignRewards = append(m.SignRewards, &Item{})
			if err := m.SignRewards[len(m.SignRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_DaySign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_DaySign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_DaySign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_DaySign) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_DaySign: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_DaySign: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= (S2C_DaySign_E_Err_DaySign(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHall
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Monies = append(m.Monies, &Money{})
			if err := m.Monies[len(m.Monies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHall
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHall
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHall(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHall = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHall   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("Hall.proto", fileDescriptor_Hall_2963e4a8957963de) }

var fileDescriptor_Hall_2963e4a8957963de = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xbd, 0x6e, 0x13, 0x4d,
	0x14, 0xf5, 0xee, 0xc6, 0x4e, 0x7c, 0xf7, 0x4b, 0x34, 0x19, 0x7d, 0xc0, 0xca, 0xa0, 0x25, 0xda,
	0x2a, 0x12, 0x92, 0x85, 0x4c, 0x43, 0x41, 0x13, 0x12, 0x0b, 0x22, 0x25, 0x2e, 0xc6, 0x44, 0xe9,
	0xb0, 0x86, 0xf5, 0xe0, 0xac, 0xe2, 0x9d, 0xb1, 0x66, 0x26, 0x38, 0xfb, 0x04, 0xb4, 0xb4, 0x3c,
	0x0f, 0x42, 0xa2, 0x4c, 0x49, 0x89, 0x92, 0x86, 0xc7, 0x40, 0x33, 0xb3, 0x7f, 0x02, 0x51, 0x51,
	0xf9, 0xde, 0x73, 0xae, 0xcf, 0xdc, 0x9f, 0xa3, 0x05, 0x78, 0x4d, 0x97, 0xcb, 0xe1, 0x4a, 0x0a,
	0x2d, 0x70, 0x90, 0xab, 0xc5, 0x20, 0xcc, 0x05, 0x67, 0x85, 0x43, 0x06, 0x90, 0x69, 0x96, 0xbb,
	0x38, 0xf9, 0xec, 0x43, 0xff, 0x70, 0x34, 0x9d, 0x9d, 0x88, 0x45, 0xc6, 0x31, 0x82, 0xe0, 0xec,
	0xf8, 0x28, 0xf2, 0xf6, 0xbc, 0xfd, 0x3e, 0x31, 0x21, 0x1e, 0xc0, 0xd6, 0x24, 0x4b, 0x2f, 0x27,
	0x34, 0x67, 0x91, 0x6f, 0xe1, 0x3a, 0xc7, 0x8f, 0xa0, 0x7f, 0xf0, 0x81, 0x6a, 0x2a, 0xcf, 0xc8,
	0x49, 0x14, 0x58, 0xb2, 0x01, 0x8c, 0x96, 0x62, 0xd7, 0xd1, 0x86, 0xd3, 0x52, 0xec, 0xda, 0x68,
	0xad, 0xa8, 0x52, 0x6b, 0x21, 0xe7, 0x51, 0xd7, 0x69, 0x55, 0xb9, 0xe1, 0x96, 0x22, 0xa5, 0x3a,
	0x13, 0x3c, 0xea, 0x39, 0xae, 0xca, 0xf1, 0x73, 0xe8, 0x2f, 0x4d, 0x7b, 0xba, 0x58, 0xb1, 0x68,
	0x73, 0xcf, 0xdb, 0xdf, 0x19, 0x0d, 0x86, 0xb9, 0x5a, 0x0c, 0xeb, 0xc6, 0x87, 0x63, 0xf7, 0xfb,
	0xa6, 0x58, 0x31, 0xd2, 0x14, 0x27, 0x2f, 0x20, 0x6c, 0x31, 0xf8, 0x3e, 0xe0, 0x56, 0x3a, 0x3b,
	0x67, 0x87, 0x17, 0x54, 0xa3, 0x0e, 0xbe, 0x07, 0xbb, 0x6d, 0xfc, 0xd5, 0x15, 0x53, 0x1a, 0x79,
	0xc9, 0x47, 0x1f, 0xfa, 0xd3, 0xd1, 0x61, 0xb9, 0x9b, 0x11, 0xf4, 0x24, 0xa3, 0x4a, 0x70, 0xbb,
	0x9e, 0xaa, 0x85, 0x9a, 0x1f, 0x8e, 0x67, 0x63, 0x29, 0x89, 0xad, 0x20, 0x65, 0x65, 0xf2, 0xd5,
	0x33, 0x0d, 0xd4, 0x38, 0x46, 0xf0, 0x5f, 0x2b, 0x9d, 0xa1, 0x8e, 0x6b, 0x69, 0x2c, 0xa5, 0x13,
	0x99, 0x5e, 0xa5, 0x29, 0x53, 0x0a, 0x79, 0xf8, 0x7f, 0x40, 0x0e, 0x9f, 0xb0, 0xf5, 0x41, 0x9a,
	0x8a, 0x2b, 0xae, 0x91, 0x8f, 0x1f, 0xc2, 0x83, 0x56, 0xf5, 0x31, 0x7f, 0x2f, 0x26, 0x42, 0x9f,
	0x52, 0x9d, 0x5e, 0xa0, 0xa0, 0x2d, 0xe5, 0x16, 0x77, 0x4e, 0x25, 0x47, 0x1b, 0x0d, 0x7e, 0xa6,
	0x98, 0x9c, 0x08, 0x3d, 0xbe, 0xce, 0x94, 0x46, 0xdd, 0x06, 0x3f, 0x58, 0x4a, 0x46, 0xe7, 0x85,
	0xd5, 0x44, 0x3d, 0xbc, 0x0b, 0xdb, 0x65, 0x3d, 0xbf, 0xe4, 0x62, 0xcd, 0xd1, 0x66, 0xf2, 0xd3,
	0x83, 0xed, 0x7a, 0x52, 0xf3, 0x2c, 0xde, 0x01, 0xbf, 0x34, 0x4a, 0x40, 0xfc, 0x7f, 0xf2, 0x49,
	0x02, 0xbd, 0x53, 0xc1, 0x33, 0xa6, 0xa2, 0x8d, 0xbd, 0x60, 0x3f, 0x1c, 0x81, 0xdd, 0xeb, 0xa9,
	0xf1, 0x2b, 0x29, 0x19, 0xa3, 0x70, 0x44, 0x8b, 0x69, 0xb6, 0xe0, 0xcc, 0x59, 0x67, 0x8b, 0x34,
	0x00, 0x8e, 0x01, 0x5c, 0x74, 0x44, 0x0b, 0x65, 0xdd, 0xd3, 0x25, 0x2d, 0x04, 0x3f, 0x81, 0xd0,
	0x64, 0x84, 0xad, 0xa9, 0x9c, 0xab, 0x68, 0xd3, 0x3e, 0xd3, 0xb7, 0xcf, 0x1c, 0x6b, 0x96, 0x93,
	0x36, 0x9b, 0x3c, 0x86, 0xd0, 0xd8, 0xaa, 0x54, 0x37, 0x2e, 0x9e, 0xd3, 0xc2, 0x0e, 0xda, 0x25,
	0x26, 0x4c, 0xbe, 0x78, 0x10, 0x9a, 0x5d, 0x54, 0x15, 0x4f, 0x21, 0x60, 0x52, 0x96, 0xa6, 0x88,
	0x6b, 0x53, 0x94, 0xb4, 0xb3, 0x45, 0x95, 0x11, 0x53, 0xda, 0x9a, 0xd8, 0xff, 0xdb, 0xc4, 0xc9,
	0xdb, 0xea, 0x08, 0x4d, 0x23, 0xbf, 0x5b, 0xa7, 0xbe, 0x53, 0xe3, 0x1a, 0x6b, 0xe4, 0xd6, 0x49,
	0xcd, 0x3f, 0x91, 0xff, 0xe7, 0x45, 0x7b, 0x2f, 0xa3, 0x6f, 0xb7, 0xb1, 0x77, 0x73, 0x1b, 0x7b,
	0x3f, 0x6e, 0x63, 0xef, 0xd3, 0x5d, 0xdc, 0xb9, 0xb9, 0x8b, 0x3b, 0xdf, 0xef, 0xe2, 0xce, 0xbb,
	0x9e, 0xfd, 0x30, 0x3c, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x48, 0x7e, 0x45, 0x44, 0x04,
	0x00, 0x00,
}
