// Code generated by protoc-gen-pbex-go. DO NOT EDIT IT!!!
// source: Login.proto

package msg

import (
	json "encoding/json"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [C2S_Login_E_LoginType] begin

var C2S_Login_E_LoginType_Slice = []int32{
	0,
	1,
}

func C2S_Login_E_LoginType_Len() int {
	return len(C2S_Login_E_LoginType_Slice)
}

func Check_C2S_Login_E_LoginType_I(value int32) bool {
	if _, ok := C2S_Login_E_LoginType_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_C2S_Login_E_LoginType(value C2S_Login_E_LoginType) bool {
	return Check_C2S_Login_E_LoginType_I(int32(value))
}

func Each_C2S_Login_E_LoginType(f func(C2S_Login_E_LoginType) bool) {
	for _, value := range C2S_Login_E_LoginType_Slice {
		if !f(C2S_Login_E_LoginType(value)) {
			break
		}
	}
}

func Each_C2S_Login_E_LoginType_I(f func(int32) bool) {
	for _, value := range C2S_Login_E_LoginType_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [C2S_Login_E_LoginType] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [S2C_Login_E_ErrReason] begin

var S2C_Login_E_ErrReason_Slice = []int32{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
}

func S2C_Login_E_ErrReason_Len() int {
	return len(S2C_Login_E_ErrReason_Slice)
}

func Check_S2C_Login_E_ErrReason_I(value int32) bool {
	if _, ok := S2C_Login_E_ErrReason_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_S2C_Login_E_ErrReason(value S2C_Login_E_ErrReason) bool {
	return Check_S2C_Login_E_ErrReason_I(int32(value))
}

func Each_S2C_Login_E_ErrReason(f func(S2C_Login_E_ErrReason) bool) {
	for _, value := range S2C_Login_E_ErrReason_Slice {
		if !f(S2C_Login_E_ErrReason(value)) {
			break
		}
	}
}

func Each_S2C_Login_E_ErrReason_I(f func(int32) bool) {
	for _, value := range S2C_Login_E_ErrReason_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [S2C_Login_E_ErrReason] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_Login] begin
func (m *C2S_Login) ResetEx() {

	m.UID = ""

	m.NickName = ""

	m.AvatarURL = ""

	m.Sex = ""

	m.Password = ""

	m.Location = ""

	m.Logintype = 0

	m.CltType = 0

	m.BigVer = 0

	m.SmallVer = 0

	m.FixVer = 0

}

func (m C2S_Login) Clone() *C2S_Login {
	n, ok := g_C2S_Login_Pool.Get().(*C2S_Login)
	if !ok || n == nil {
		n = &C2S_Login{}
	}

	n.UID = m.UID

	n.NickName = m.NickName

	n.AvatarURL = m.AvatarURL

	n.Sex = m.Sex

	n.Password = m.Password

	n.Location = m.Location

	n.Logintype = m.Logintype

	n.CltType = m.CltType

	n.BigVer = m.BigVer

	n.SmallVer = m.SmallVer

	n.FixVer = m.FixVer

	return n
}

func Clone_C2S_Login_Slice(dst []*C2S_Login, src []*C2S_Login) []*C2S_Login {
	for _, i := range dst {
		Put_C2S_Login(i)
	}
	if len(src) > 0 {
		dst = make([]*C2S_Login, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*C2S_Login{}
		dst = nil
	}
	return dst
}

func (m C2S_Login) JsonString() string {
	ba, _ := json.Marshal(m)
	return "C2S_Login:" + string(ba)
}

func New_C2S_Login() *C2S_Login {
	m := &C2S_Login{}
	return m
}

var g_C2S_Login_Pool = sync.Pool{}

func Get_C2S_Login() *C2S_Login {
	m, ok := g_C2S_Login_Pool.Get().(*C2S_Login)
	if !ok {
		m = New_C2S_Login()
	} else {
		if m == nil {
			m = New_C2S_Login()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_Login(i interface{}) {
	if m, ok := i.(*C2S_Login); ok && m != nil {
		g_C2S_Login_Pool.Put(i)
	}
}

// message [C2S_Login] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_Login] begin
func (m *S2C_Login) ResetEx() {

	m.Reason = 0

}

func (m S2C_Login) Clone() *S2C_Login {
	n, ok := g_S2C_Login_Pool.Get().(*S2C_Login)
	if !ok || n == nil {
		n = &S2C_Login{}
	}

	n.Reason = m.Reason

	return n
}

func Clone_S2C_Login_Slice(dst []*S2C_Login, src []*S2C_Login) []*S2C_Login {
	for _, i := range dst {
		Put_S2C_Login(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_Login, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_Login{}
		dst = nil
	}
	return dst
}

func (m S2C_Login) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_Login:" + string(ba)
}

func New_S2C_Login() *S2C_Login {
	m := &S2C_Login{}
	return m
}

var g_S2C_Login_Pool = sync.Pool{}

func Get_S2C_Login() *S2C_Login {
	m, ok := g_S2C_Login_Pool.Get().(*S2C_Login)
	if !ok {
		m = New_S2C_Login()
	} else {
		if m == nil {
			m = New_S2C_Login()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_Login(i interface{}) {
	if m, ok := i.(*S2C_Login); ok && m != nil {
		g_S2C_Login_Pool.Put(i)
	}
}

// message [S2C_Login] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_LoginInfo] begin
func (m *S2C_LoginInfo) ResetEx() {

	m.ID = 0

	m.NickName = ""

	m.AvatarURL = ""

	for _, i := range m.Monies {
		Put_Money(i)
	}

	//m.Monies = []*Money{}
	m.Monies = nil

	m.DaySigned = false

	m.SignedDays = 0

	for _, i := range m.SignRewards {
		Put_Item(i)
	}

	//m.SignRewards = []*Item{}
	m.SignRewards = nil

	m.HallRoleSex = 0

	m.InTheGame = false

}

func (m S2C_LoginInfo) Clone() *S2C_LoginInfo {
	n, ok := g_S2C_LoginInfo_Pool.Get().(*S2C_LoginInfo)
	if !ok || n == nil {
		n = &S2C_LoginInfo{}
	}

	n.ID = m.ID

	n.NickName = m.NickName

	n.AvatarURL = m.AvatarURL

	if len(m.Monies) > 0 {
		n.Monies = make([]*Money, len(m.Monies))
		for i, e := range m.Monies {

			if e != nil {
				n.Monies[i] = e.Clone()
			}

		}
	} else {
		//n.Monies = []*Money{}
		n.Monies = nil
	}

	n.DaySigned = m.DaySigned

	n.SignedDays = m.SignedDays

	if len(m.SignRewards) > 0 {
		n.SignRewards = make([]*Item, len(m.SignRewards))
		for i, e := range m.SignRewards {

			if e != nil {
				n.SignRewards[i] = e.Clone()
			}

		}
	} else {
		//n.SignRewards = []*Item{}
		n.SignRewards = nil
	}

	n.HallRoleSex = m.HallRoleSex

	n.InTheGame = m.InTheGame

	return n
}

func Clone_S2C_LoginInfo_Slice(dst []*S2C_LoginInfo, src []*S2C_LoginInfo) []*S2C_LoginInfo {
	for _, i := range dst {
		Put_S2C_LoginInfo(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_LoginInfo, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_LoginInfo{}
		dst = nil
	}
	return dst
}

func (m S2C_LoginInfo) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_LoginInfo:" + string(ba)
}

func New_S2C_LoginInfo() *S2C_LoginInfo {
	m := &S2C_LoginInfo{}
	return m
}

var g_S2C_LoginInfo_Pool = sync.Pool{}

func Get_S2C_LoginInfo() *S2C_LoginInfo {
	m, ok := g_S2C_LoginInfo_Pool.Get().(*S2C_LoginInfo)
	if !ok {
		m = New_S2C_LoginInfo()
	} else {
		if m == nil {
			m = New_S2C_LoginInfo()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_LoginInfo(i interface{}) {
	if m, ok := i.(*S2C_LoginInfo); ok && m != nil {
		g_S2C_LoginInfo_Pool.Put(i)
	}
}

// message [S2C_LoginInfo] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
