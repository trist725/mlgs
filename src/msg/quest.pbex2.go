// Code generated by protoc-gen-pbex2-go. DO NOT EDIT IT!!!
// source: quest.proto

/*
It has these top-level messages:
	Quest
	C2S_GetAllQuests
	S2C_GetAllQuests
	C2S_GetQuestReward
	S2C_GetQuestReward
*/

package msg

import "sync"
import protocol "github.com/trist725/mgsu/network/protocol/protobuf/v2"

var _ *sync.Pool
var _ = protocol.PH

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [S2C_GetQuestReward_E_Err] begin

var S2C_GetQuestReward_E_Err_Slice = []int32{
	0,
	1,
	2,
	3,
	4,
}

func S2C_GetQuestReward_E_Err_Len() int {
	return len(S2C_GetQuestReward_E_Err_Slice)
}

func Check_S2C_GetQuestReward_E_Err_I(value int32) bool {
	if _, ok := S2C_GetQuestReward_E_Err_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_S2C_GetQuestReward_E_Err(value S2C_GetQuestReward_E_Err) bool {
	return Check_S2C_GetQuestReward_E_Err_I(int32(value))
}

func Each_S2C_GetQuestReward_E_Err(f func(S2C_GetQuestReward_E_Err) bool) {
	for _, value := range S2C_GetQuestReward_E_Err_Slice {
		if !f(S2C_GetQuestReward_E_Err(value)) {
			break
		}
	}
}

func Each_S2C_GetQuestReward_E_Err_I(f func(int32) bool) {
	for _, value := range S2C_GetQuestReward_E_Err_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [S2C_GetQuestReward_E_Err] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [Quest] begin
func (m *Quest) ResetEx() {
	m.Id = 0
	m.Progress = 0
	m.Received = false

}

func (m Quest) Clone() *Quest {
	n, ok := g_Quest_Pool.Get().(*Quest)
	if !ok || n == nil {
		n = &Quest{}
	}

	n.Id = m.Id
	n.Progress = m.Progress
	n.Received = m.Received

	return n
}

func Clone_Quest_Slice(dst []*Quest, src []*Quest) []*Quest {
	for _, i := range dst {
		Put_Quest(i)
	}
	dst = []*Quest{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_Quest() *Quest {
	m := &Quest{}
	return m
}

var g_Quest_Pool = sync.Pool{}

func Get_Quest() *Quest {
	m, ok := g_Quest_Pool.Get().(*Quest)
	if !ok {
		m = New_Quest()
	} else {
		if m == nil {
			m = New_Quest()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_Quest(i interface{}) {
	if m, ok := i.(*Quest); ok && m != nil {
		g_Quest_Pool.Put(i)
	}
}

// message [Quest] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_GetAllQuests] begin
func (m *C2S_GetAllQuests) ResetEx() {

}

func (m C2S_GetAllQuests) Clone() *C2S_GetAllQuests {
	n, ok := g_C2S_GetAllQuests_Pool.Get().(*C2S_GetAllQuests)
	if !ok || n == nil {
		n = &C2S_GetAllQuests{}
	}

	return n
}

func Clone_C2S_GetAllQuests_Slice(dst []*C2S_GetAllQuests, src []*C2S_GetAllQuests) []*C2S_GetAllQuests {
	for _, i := range dst {
		Put_C2S_GetAllQuests(i)
	}
	dst = []*C2S_GetAllQuests{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_C2S_GetAllQuests() *C2S_GetAllQuests {
	m := &C2S_GetAllQuests{}
	return m
}

var g_C2S_GetAllQuests_Pool = sync.Pool{}

func Get_C2S_GetAllQuests() *C2S_GetAllQuests {
	m, ok := g_C2S_GetAllQuests_Pool.Get().(*C2S_GetAllQuests)
	if !ok {
		m = New_C2S_GetAllQuests()
	} else {
		if m == nil {
			m = New_C2S_GetAllQuests()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_GetAllQuests(i interface{}) {
	if m, ok := i.(*C2S_GetAllQuests); ok && m != nil {
		g_C2S_GetAllQuests_Pool.Put(i)
	}
}

// message [C2S_GetAllQuests] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_GetAllQuests] begin
func (m *S2C_GetAllQuests) ResetEx() {

	for _, i := range m.Quests {
		Put_Quest(i)
	}
	m.Quests = []*Quest{}

}

func (m S2C_GetAllQuests) Clone() *S2C_GetAllQuests {
	n, ok := g_S2C_GetAllQuests_Pool.Get().(*S2C_GetAllQuests)
	if !ok || n == nil {
		n = &S2C_GetAllQuests{}
	}

	if len(m.Quests) > 0 {
		for _, i := range m.Quests {
			if i != nil {
				n.Quests = append(n.Quests, i.Clone())
			} else {
				n.Quests = append(n.Quests, nil)
			}
		}
	} else {
		n.Quests = []*Quest{}
	}

	return n
}

func Clone_S2C_GetAllQuests_Slice(dst []*S2C_GetAllQuests, src []*S2C_GetAllQuests) []*S2C_GetAllQuests {
	for _, i := range dst {
		Put_S2C_GetAllQuests(i)
	}
	dst = []*S2C_GetAllQuests{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_S2C_GetAllQuests() *S2C_GetAllQuests {
	m := &S2C_GetAllQuests{
		Quests: []*Quest{},
	}
	return m
}

var g_S2C_GetAllQuests_Pool = sync.Pool{}

func Get_S2C_GetAllQuests() *S2C_GetAllQuests {
	m, ok := g_S2C_GetAllQuests_Pool.Get().(*S2C_GetAllQuests)
	if !ok {
		m = New_S2C_GetAllQuests()
	} else {
		if m == nil {
			m = New_S2C_GetAllQuests()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_GetAllQuests(i interface{}) {
	if m, ok := i.(*S2C_GetAllQuests); ok && m != nil {
		g_S2C_GetAllQuests_Pool.Put(i)
	}
}

// message [S2C_GetAllQuests] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_GetQuestReward] begin
func (m *C2S_GetQuestReward) ResetEx() {
	m.Id = 0
	m.CltPath = ""

}

func (m C2S_GetQuestReward) Clone() *C2S_GetQuestReward {
	n, ok := g_C2S_GetQuestReward_Pool.Get().(*C2S_GetQuestReward)
	if !ok || n == nil {
		n = &C2S_GetQuestReward{}
	}

	n.Id = m.Id
	n.CltPath = m.CltPath

	return n
}

func Clone_C2S_GetQuestReward_Slice(dst []*C2S_GetQuestReward, src []*C2S_GetQuestReward) []*C2S_GetQuestReward {
	for _, i := range dst {
		Put_C2S_GetQuestReward(i)
	}
	dst = []*C2S_GetQuestReward{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_C2S_GetQuestReward() *C2S_GetQuestReward {
	m := &C2S_GetQuestReward{}
	return m
}

var g_C2S_GetQuestReward_Pool = sync.Pool{}

func Get_C2S_GetQuestReward() *C2S_GetQuestReward {
	m, ok := g_C2S_GetQuestReward_Pool.Get().(*C2S_GetQuestReward)
	if !ok {
		m = New_C2S_GetQuestReward()
	} else {
		if m == nil {
			m = New_C2S_GetQuestReward()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_GetQuestReward(i interface{}) {
	if m, ok := i.(*C2S_GetQuestReward); ok && m != nil {
		g_C2S_GetQuestReward_Pool.Put(i)
	}
}

// message [C2S_GetQuestReward] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_GetQuestReward] begin
func (m *S2C_GetQuestReward) ResetEx() {
	m.Err = 0
	m.Id = 0
	m.CltPath = ""

}

func (m S2C_GetQuestReward) Clone() *S2C_GetQuestReward {
	n, ok := g_S2C_GetQuestReward_Pool.Get().(*S2C_GetQuestReward)
	if !ok || n == nil {
		n = &S2C_GetQuestReward{}
	}

	n.Err = m.Err
	n.Id = m.Id
	n.CltPath = m.CltPath

	return n
}

func Clone_S2C_GetQuestReward_Slice(dst []*S2C_GetQuestReward, src []*S2C_GetQuestReward) []*S2C_GetQuestReward {
	for _, i := range dst {
		Put_S2C_GetQuestReward(i)
	}
	dst = []*S2C_GetQuestReward{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_S2C_GetQuestReward() *S2C_GetQuestReward {
	m := &S2C_GetQuestReward{}
	return m
}

var g_S2C_GetQuestReward_Pool = sync.Pool{}

func Get_S2C_GetQuestReward() *S2C_GetQuestReward {
	m, ok := g_S2C_GetQuestReward_Pool.Get().(*S2C_GetQuestReward)
	if !ok {
		m = New_S2C_GetQuestReward()
	} else {
		if m == nil {
			m = New_S2C_GetQuestReward()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_GetQuestReward(i interface{}) {
	if m, ok := i.(*S2C_GetQuestReward); ok && m != nil {
		g_S2C_GetQuestReward_Pool.Put(i)
	}
}

// message [S2C_GetQuestReward] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
