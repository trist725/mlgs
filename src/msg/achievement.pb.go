// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: achievement.proto

package msg

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Achievement struct {
	///在成就表中的id
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	///成就表中的类型
	Type int32 `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (m *Achievement) Reset()         { *m = Achievement{} }
func (m *Achievement) String() string { return proto.CompactTextString(m) }
func (*Achievement) ProtoMessage()    {}
func (*Achievement) Descriptor() ([]byte, []int) {
	return fileDescriptor_db793eeb74aaeebb, []int{0}
}
func (m *Achievement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Achievement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Achievement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Achievement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Achievement.Merge(m, src)
}
func (m *Achievement) XXX_Size() int {
	return m.Size()
}
func (m *Achievement) XXX_DiscardUnknown() {
	xxx_messageInfo_Achievement.DiscardUnknown(m)
}

var xxx_messageInfo_Achievement proto.InternalMessageInfo

func (m *Achievement) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Achievement) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

///获取已完成的成就
type C2S_GetCompletedAchievements struct {
}

func (m *C2S_GetCompletedAchievements) Reset()         { *m = C2S_GetCompletedAchievements{} }
func (m *C2S_GetCompletedAchievements) String() string { return proto.CompactTextString(m) }
func (*C2S_GetCompletedAchievements) ProtoMessage()    {}
func (*C2S_GetCompletedAchievements) Descriptor() ([]byte, []int) {
	return fileDescriptor_db793eeb74aaeebb, []int{1}
}
func (m *C2S_GetCompletedAchievements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_GetCompletedAchievements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_GetCompletedAchievements.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_GetCompletedAchievements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_GetCompletedAchievements.Merge(m, src)
}
func (m *C2S_GetCompletedAchievements) XXX_Size() int {
	return m.Size()
}
func (m *C2S_GetCompletedAchievements) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_GetCompletedAchievements.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_GetCompletedAchievements proto.InternalMessageInfo

type S2C_GetCompletedAchievements struct {
	Achievements []*Achievement `protobuf:"bytes,1,rep,name=Achievements,proto3" json:"Achievements,omitempty"`
}

func (m *S2C_GetCompletedAchievements) Reset()         { *m = S2C_GetCompletedAchievements{} }
func (m *S2C_GetCompletedAchievements) String() string { return proto.CompactTextString(m) }
func (*S2C_GetCompletedAchievements) ProtoMessage()    {}
func (*S2C_GetCompletedAchievements) Descriptor() ([]byte, []int) {
	return fileDescriptor_db793eeb74aaeebb, []int{2}
}
func (m *S2C_GetCompletedAchievements) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_GetCompletedAchievements) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_GetCompletedAchievements.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_GetCompletedAchievements) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_GetCompletedAchievements.Merge(m, src)
}
func (m *S2C_GetCompletedAchievements) XXX_Size() int {
	return m.Size()
}
func (m *S2C_GetCompletedAchievements) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_GetCompletedAchievements.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_GetCompletedAchievements proto.InternalMessageInfo

func (m *S2C_GetCompletedAchievements) GetAchievements() []*Achievement {
	if m != nil {
		return m.Achievements
	}
	return nil
}

func init() {
	proto.RegisterType((*Achievement)(nil), "msg.Achievement")
	proto.RegisterType((*C2S_GetCompletedAchievements)(nil), "msg.C2S_GetCompletedAchievements")
	proto.RegisterType((*S2C_GetCompletedAchievements)(nil), "msg.S2C_GetCompletedAchievements")
}

func init() { proto.RegisterFile("achievement.proto", fileDescriptor_db793eeb74aaeebb) }

var fileDescriptor_db793eeb74aaeebb = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x4c, 0xce, 0xc8,
	0x4c, 0x2d, 0x4b, 0xcd, 0x4d, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce,
	0x2d, 0x4e, 0x57, 0x32, 0xe4, 0xe2, 0x76, 0x44, 0xc8, 0x08, 0xf1, 0x71, 0x31, 0x79, 0xa6, 0x48,
	0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x31, 0x79, 0xa6, 0x08, 0x09, 0x71, 0xb1, 0x84, 0x54, 0x16,
	0xa4, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0xb0, 0x06, 0x81, 0xd9, 0x4a, 0x72, 0x5c, 0x32, 0xce, 0x46,
	0xc1, 0xf1, 0xee, 0xa9, 0x25, 0xce, 0xf9, 0xb9, 0x05, 0x39, 0xa9, 0x25, 0xa9, 0x29, 0x48, 0x46,
	0x14, 0x2b, 0x85, 0x70, 0xc9, 0x04, 0x1b, 0x39, 0xe3, 0x94, 0x17, 0x32, 0xe1, 0xe2, 0x41, 0xe6,
	0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x1b, 0x09, 0xe8, 0xe5, 0x16, 0xa7, 0xeb, 0x21, 0x49, 0x04,
	0xa1, 0xa8, 0x72, 0x92, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4,
	0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x24, 0x36,
	0xb0, 0x77, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x92, 0x18, 0xb8, 0xe3, 0x00, 0x00,
	0x00,
}

func (m *Achievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Achievement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAchievement(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_GetCompletedAchievements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_GetCompletedAchievements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_GetCompletedAchievements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *S2C_GetCompletedAchievements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_GetCompletedAchievements) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_GetCompletedAchievements) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for iNdEx := len(m.Achievements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Achievements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAchievement(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAchievement(dAtA []byte, offset int, v uint64) int {
	offset -= sovAchievement(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Achievement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAchievement(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovAchievement(uint64(m.Type))
	}
	return n
}

func (m *C2S_GetCompletedAchievements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *S2C_GetCompletedAchievements) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 1 + l + sovAchievement(uint64(l))
		}
	}
	return n
}

func sovAchievement(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAchievement(x uint64) (n int) {
	return sovAchievement(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Achievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_GetCompletedAchievements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_GetCompletedAchievements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_GetCompletedAchievements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_GetCompletedAchievements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_GetCompletedAchievements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_GetCompletedAchievements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchievement
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAchievement
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchievement(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAchievement
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAchievement(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAchievement
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchievement
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAchievement
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAchievement
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAchievement
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAchievement        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAchievement          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAchievement = fmt.Errorf("proto: unexpected end of group")
)
