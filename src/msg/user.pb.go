// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

package msg

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

/// 下发用户数据错误枚举
type S2C_UpdateUserData_E_Error int32

const (
	S2C_UpdateUserData_Error_ S2C_UpdateUserData_E_Error = 0
	/// OK
	S2C_UpdateUserData_OK S2C_UpdateUserData_E_Error = 1
	/// 没有用户数据
	S2C_UpdateUserData_NotExist S2C_UpdateUserData_E_Error = 2
)

var S2C_UpdateUserData_E_Error_name = map[int32]string{
	0: "Error_",
	1: "OK",
	2: "NotExist",
}

var S2C_UpdateUserData_E_Error_value = map[string]int32{
	"Error_":   0,
	"OK":       1,
	"NotExist": 2,
}

func (x S2C_UpdateUserData_E_Error) String() string {
	return proto.EnumName(S2C_UpdateUserData_E_Error_name, int32(x))
}

func (S2C_UpdateUserData_E_Error) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1, 0}
}

/// 用户数据
type User struct {
	/// id
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	/// 名字
	NickName string `protobuf:"bytes,2,opt,name=NickName,proto3" json:"NickName,omitempty"`
	/// 性别
	Sex string `protobuf:"bytes,3,opt,name=Sex,proto3" json:"Sex,omitempty"`
	/// 物品
	Items []*Item `protobuf:"bytes,4,rep,name=Items,proto3" json:"Items,omitempty"`
	/// 货币
	Monies []*Money `protobuf:"bytes,6,rep,name=Monies,proto3" json:"Monies,omitempty"`
	///等级
	Level int32 `protobuf:"varint,21,opt,name=Level,proto3" json:"Level,omitempty"`
	///经验
	Exp int64 `protobuf:"varint,22,opt,name=Exp,proto3" json:"Exp,omitempty"`
	///历史最大牌型
	BestCombo *BestCombo `protobuf:"bytes,32,opt,name=BestCombo,proto3" json:"BestCombo,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *User) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *User) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *User) GetMonies() []*Money {
	if m != nil {
		return m.Monies
	}
	return nil
}

func (m *User) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User) GetExp() int64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *User) GetBestCombo() *BestCombo {
	if m != nil {
		return m.BestCombo
	}
	return nil
}

/// 服务端下发用户信息
//@msg
type S2C_UpdateUserData struct {
	/// 错误枚举
	Err S2C_UpdateUserData_E_Error `protobuf:"varint,1,opt,name=Err,proto3,enum=msg.S2C_UpdateUserData_E_Error" json:"Err,omitempty"`
	/// 用户数据
	Data *User `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *S2C_UpdateUserData) Reset()         { *m = S2C_UpdateUserData{} }
func (m *S2C_UpdateUserData) String() string { return proto.CompactTextString(m) }
func (*S2C_UpdateUserData) ProtoMessage()    {}
func (*S2C_UpdateUserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}
func (m *S2C_UpdateUserData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_UpdateUserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_UpdateUserData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_UpdateUserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_UpdateUserData.Merge(m, src)
}
func (m *S2C_UpdateUserData) XXX_Size() int {
	return m.Size()
}
func (m *S2C_UpdateUserData) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_UpdateUserData.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_UpdateUserData proto.InternalMessageInfo

func (m *S2C_UpdateUserData) GetErr() S2C_UpdateUserData_E_Error {
	if m != nil {
		return m.Err
	}
	return S2C_UpdateUserData_Error_
}

func (m *S2C_UpdateUserData) GetData() *User {
	if m != nil {
		return m.Data
	}
	return nil
}

/// 更新用户信息请求
//@msg
type C2S_UpdateUserData struct {
	/// 用户id
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *C2S_UpdateUserData) Reset()         { *m = C2S_UpdateUserData{} }
func (m *C2S_UpdateUserData) String() string { return proto.CompactTextString(m) }
func (*C2S_UpdateUserData) ProtoMessage()    {}
func (*C2S_UpdateUserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{2}
}
func (m *C2S_UpdateUserData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *C2S_UpdateUserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_C2S_UpdateUserData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *C2S_UpdateUserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_C2S_UpdateUserData.Merge(m, src)
}
func (m *C2S_UpdateUserData) XXX_Size() int {
	return m.Size()
}
func (m *C2S_UpdateUserData) XXX_DiscardUnknown() {
	xxx_messageInfo_C2S_UpdateUserData.DiscardUnknown(m)
}

var xxx_messageInfo_C2S_UpdateUserData proto.InternalMessageInfo

func (m *C2S_UpdateUserData) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

/// 服务端通知用户更新item
//@msg
type S2C_UpdateItems struct {
	///获得的
	GainItems []*Item `protobuf:"bytes,1,rep,name=GainItems,proto3" json:"GainItems,omitempty"`
	///失去的
	LostItems []*Item `protobuf:"bytes,2,rep,name=LostItems,proto3" json:"LostItems,omitempty"`
}

func (m *S2C_UpdateItems) Reset()         { *m = S2C_UpdateItems{} }
func (m *S2C_UpdateItems) String() string { return proto.CompactTextString(m) }
func (*S2C_UpdateItems) ProtoMessage()    {}
func (*S2C_UpdateItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{3}
}
func (m *S2C_UpdateItems) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S2C_UpdateItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_S2C_UpdateItems.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *S2C_UpdateItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S2C_UpdateItems.Merge(m, src)
}
func (m *S2C_UpdateItems) XXX_Size() int {
	return m.Size()
}
func (m *S2C_UpdateItems) XXX_DiscardUnknown() {
	xxx_messageInfo_S2C_UpdateItems.DiscardUnknown(m)
}

var xxx_messageInfo_S2C_UpdateItems proto.InternalMessageInfo

func (m *S2C_UpdateItems) GetGainItems() []*Item {
	if m != nil {
		return m.GainItems
	}
	return nil
}

func (m *S2C_UpdateItems) GetLostItems() []*Item {
	if m != nil {
		return m.LostItems
	}
	return nil
}

func init() {
	proto.RegisterEnum("msg.S2C_UpdateUserData_E_Error", S2C_UpdateUserData_E_Error_name, S2C_UpdateUserData_E_Error_value)
	proto.RegisterType((*User)(nil), "msg.User")
	proto.RegisterType((*S2C_UpdateUserData)(nil), "msg.S2C_UpdateUserData")
	proto.RegisterType((*C2S_UpdateUserData)(nil), "msg.C2S_UpdateUserData")
	proto.RegisterType((*S2C_UpdateItems)(nil), "msg.S2C_UpdateItems")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xd1, 0xaa, 0xda, 0x40,
	0x10, 0x86, 0xb3, 0x89, 0xa6, 0x66, 0x2c, 0x36, 0x2c, 0x6d, 0x59, 0x84, 0xc6, 0x10, 0x0a, 0x0d,
	0xb4, 0x04, 0x9a, 0xbe, 0x81, 0x1a, 0x8a, 0x54, 0x2d, 0xac, 0x78, 0x2d, 0xd1, 0x2e, 0x36, 0xb4,
	0x71, 0x65, 0x77, 0x5b, 0xec, 0x5b, 0x14, 0xfa, 0x52, 0xbd, 0xf4, 0xf2, 0xdc, 0x9d, 0x83, 0xbe,
	0xc8, 0x61, 0x37, 0x9e, 0x04, 0xf4, 0x6e, 0xe6, 0x9f, 0x2f, 0xc9, 0x3f, 0xff, 0x04, 0xe0, 0x97,
	0x64, 0x22, 0xd9, 0x0b, 0xae, 0x38, 0x76, 0x4a, 0xb9, 0xed, 0x43, 0xa1, 0x58, 0x59, 0x09, 0xfd,
	0x6e, 0xc9, 0x77, 0xec, 0x4f, 0xdd, 0xe4, 0x6a, 0xf3, 0xbd, 0x6a, 0xa2, 0x7b, 0x04, 0xad, 0xa5,
	0x64, 0x02, 0xf7, 0xc0, 0x9e, 0x8c, 0x09, 0x0a, 0x51, 0xec, 0x50, 0x7b, 0x32, 0xc6, 0x7d, 0xe8,
	0xcc, 0x8b, 0xcd, 0x8f, 0x79, 0x5e, 0x32, 0x62, 0x87, 0x28, 0xf6, 0x68, 0xdd, 0x63, 0x1f, 0x9c,
	0x05, 0x3b, 0x10, 0xc7, 0xc8, 0xba, 0xc4, 0x03, 0x68, 0x4f, 0x14, 0x2b, 0x25, 0x69, 0x85, 0x4e,
	0xdc, 0x4d, 0xbd, 0xa4, 0x94, 0xdb, 0x44, 0x2b, 0xb4, 0xd2, 0x71, 0x04, 0xee, 0x8c, 0xef, 0x0a,
	0x26, 0x89, 0x6b, 0x08, 0x30, 0xc4, 0x4c, 0xdb, 0xa2, 0x97, 0x09, 0x7e, 0x09, 0xed, 0x29, 0xfb,
	0xcd, 0x7e, 0x92, 0x57, 0x21, 0x8a, 0xdb, 0xb4, 0x6a, 0xf4, 0xc7, 0xb2, 0xc3, 0x9e, 0xbc, 0x36,
	0xce, 0x74, 0x89, 0x3f, 0x80, 0x37, 0x64, 0x52, 0x8d, 0x78, 0xb9, 0xe6, 0x24, 0x0c, 0x51, 0xdc,
	0x4d, 0x7b, 0xe6, 0x75, 0xb5, 0x4a, 0x1b, 0x20, 0xfa, 0x87, 0x00, 0x2f, 0xd2, 0xd1, 0x6a, 0xb9,
	0xff, 0x96, 0x2b, 0xa6, 0x77, 0x1d, 0xe7, 0x2a, 0xc7, 0x1f, 0xc1, 0xc9, 0x84, 0x30, 0x0b, 0xf7,
	0xd2, 0x81, 0x79, 0xfc, 0x96, 0x4a, 0xb2, 0x55, 0x26, 0x04, 0x17, 0x54, 0xb3, 0xf8, 0x0d, 0xb4,
	0xb4, 0x68, 0xe2, 0x78, 0xda, 0x51, 0x93, 0xd4, 0xc8, 0xd1, 0x7b, 0x78, 0x76, 0xc1, 0x31, 0x80,
	0x6b, 0x8a, 0x95, 0x6f, 0x61, 0x17, 0xec, 0xaf, 0x5f, 0x7c, 0x84, 0x9f, 0x43, 0x67, 0xce, 0x55,
	0x76, 0x28, 0xa4, 0xf2, 0xed, 0xe8, 0x2d, 0xe0, 0x51, 0xba, 0xb8, 0x36, 0xd5, 0x1c, 0xc1, 0xd3,
	0x47, 0x88, 0x36, 0xf0, 0xa2, 0x31, 0x55, 0x05, 0xf9, 0x0e, 0xbc, 0xcf, 0x79, 0xb1, 0xab, 0xd2,
	0x46, 0xd7, 0x69, 0x37, 0x33, 0x0d, 0x4e, 0xb9, 0x54, 0x15, 0x68, 0xdf, 0x80, 0xf5, 0x6c, 0x48,
	0xfe, 0x9f, 0x02, 0x74, 0x3c, 0x05, 0xe8, 0xe1, 0x14, 0xa0, 0xbf, 0xe7, 0xc0, 0x3a, 0x9e, 0x03,
	0xeb, 0xee, 0x1c, 0x58, 0x6b, 0xd7, 0xfc, 0x23, 0x9f, 0x1e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x79,
	0xbc, 0x22, 0xf6, 0x5c, 0x02, 0x00, 0x00,
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BestCombo != nil {
		{
			size, err := m.BestCombo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x82
	}
	if m.Exp != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.Monies) > 0 {
		for iNdEx := len(m.Monies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Monies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Sex) > 0 {
		i -= len(m.Sex)
		copy(dAtA[i:], m.Sex)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Sex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *S2C_UpdateUserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_UpdateUserData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_UpdateUserData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Err != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Err))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *C2S_UpdateUserData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2S_UpdateUserData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *C2S_UpdateUserData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintUser(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *S2C_UpdateItems) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2C_UpdateItems) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S2C_UpdateItems) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LostItems) > 0 {
		for iNdEx := len(m.LostItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LostItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GainItems) > 0 {
		for iNdEx := len(m.GainItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GainItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovUser(uint64(m.ID))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.Monies) > 0 {
		for _, e := range m.Monies {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.Level != 0 {
		n += 2 + sovUser(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 2 + sovUser(uint64(m.Exp))
	}
	if m.BestCombo != nil {
		l = m.BestCombo.Size()
		n += 2 + l + sovUser(uint64(l))
	}
	return n
}

func (m *S2C_UpdateUserData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Err != 0 {
		n += 1 + sovUser(uint64(m.Err))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *C2S_UpdateUserData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *S2C_UpdateItems) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GainItems) > 0 {
		for _, e := range m.GainItems {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.LostItems) > 0 {
		for _, e := range m.LostItems {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Monies = append(m.Monies, &Money{})
			if err := m.Monies[len(m.Monies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BestCombo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BestCombo == nil {
				m.BestCombo = &BestCombo{}
			}
			if err := m.BestCombo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_UpdateUserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_UpdateUserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_UpdateUserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			m.Err = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Err |= S2C_UpdateUserData_E_Error(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &User{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2S_UpdateUserData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2S_UpdateUserData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2S_UpdateUserData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2C_UpdateItems) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2C_UpdateItems: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2C_UpdateItems: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GainItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GainItems = append(m.GainItems, &Item{})
			if err := m.GainItems[len(m.GainItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LostItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LostItems = append(m.LostItems, &Item{})
			if err := m.LostItems[len(m.LostItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
