// Code generated by protoc-gen-pbex2-go. DO NOT EDIT IT!!!
// source: user.proto

/*
It has these top-level messages:
	User
	S2C_UpdateUserData
	C2S_UpdateUserData
	S2C_UpdateItems
*/

package msg

import "sync"
import protocol "github.com/trist725/mgsu/network/protocol/protobuf/v2"

var _ *sync.Pool
var _ = protocol.PH

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [S2C_UpdateUserData_E_Error] begin

var S2C_UpdateUserData_E_Error_Slice = []int32{
	0,
	1,
	2,
}

func S2C_UpdateUserData_E_Error_Len() int {
	return len(S2C_UpdateUserData_E_Error_Slice)
}

func Check_S2C_UpdateUserData_E_Error_I(value int32) bool {
	if _, ok := S2C_UpdateUserData_E_Error_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_S2C_UpdateUserData_E_Error(value S2C_UpdateUserData_E_Error) bool {
	return Check_S2C_UpdateUserData_E_Error_I(int32(value))
}

func Each_S2C_UpdateUserData_E_Error(f func(S2C_UpdateUserData_E_Error) bool) {
	for _, value := range S2C_UpdateUserData_E_Error_Slice {
		if !f(S2C_UpdateUserData_E_Error(value)) {
			break
		}
	}
}

func Each_S2C_UpdateUserData_E_Error_I(f func(int32) bool) {
	for _, value := range S2C_UpdateUserData_E_Error_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [S2C_UpdateUserData_E_Error] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [User] begin
func (m *User) ResetEx() {
	m.ID = 0
	m.NickName = ""
	m.Sex = ""

	for _, i := range m.Items {
		Put_Item(i)
	}
	m.Items = []*Item{}

	for _, i := range m.Monies {
		Put_Money(i)
	}
	m.Monies = []*Money{}
	m.Level = 0
	m.Exp = 0
	m.BestCombo.ResetEx()

}

func (m User) Clone() *User {
	n, ok := g_User_Pool.Get().(*User)
	if !ok || n == nil {
		n = &User{}
	}

	n.ID = m.ID
	n.NickName = m.NickName
	n.Sex = m.Sex

	if len(m.Items) > 0 {
		for _, i := range m.Items {
			if i != nil {
				n.Items = append(n.Items, i.Clone())
			} else {
				n.Items = append(n.Items, nil)
			}
		}
	} else {
		n.Items = []*Item{}
	}

	if len(m.Monies) > 0 {
		for _, i := range m.Monies {
			if i != nil {
				n.Monies = append(n.Monies, i.Clone())
			} else {
				n.Monies = append(n.Monies, nil)
			}
		}
	} else {
		n.Monies = []*Money{}
	}

	n.Level = m.Level
	n.Exp = m.Exp
	n.BestCombo = m.BestCombo.Clone()

	return n
}

func Clone_User_Slice(dst []*User, src []*User) []*User {
	for _, i := range dst {
		Put_User(i)
	}
	dst = []*User{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func New_User() *User {
	m := &User{
		Items:     []*Item{},
		Monies:    []*Money{},
		BestCombo: New_BestCombo(),
	}
	return m
}

var g_User_Pool = sync.Pool{}

func Get_User() *User {
	m, ok := g_User_Pool.Get().(*User)
	if !ok {
		m = New_User()
	} else {
		if m == nil {
			m = New_User()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_User(i interface{}) {
	if m, ok := i.(*User); ok && m != nil {
		g_User_Pool.Put(i)
	}
}

// message [User] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_UpdateUserData] begin
func (m *S2C_UpdateUserData) ResetEx() {
	m.Err = 0
	m.Data.ResetEx()

}

func (m S2C_UpdateUserData) Clone() *S2C_UpdateUserData {
	n, ok := g_S2C_UpdateUserData_Pool.Get().(*S2C_UpdateUserData)
	if !ok || n == nil {
		n = &S2C_UpdateUserData{}
	}

	n.Err = m.Err
	n.Data = m.Data.Clone()

	return n
}

func Clone_S2C_UpdateUserData_Slice(dst []*S2C_UpdateUserData, src []*S2C_UpdateUserData) []*S2C_UpdateUserData {
	for _, i := range dst {
		Put_S2C_UpdateUserData(i)
	}
	dst = []*S2C_UpdateUserData{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func (S2C_UpdateUserData) V2() {
}

func (S2C_UpdateUserData) MessageID() protocol.MessageID {
	return "msg.S2C_UpdateUserData"
}

func S2C_UpdateUserData_MessageID() protocol.MessageID {
	return "msg.S2C_UpdateUserData"
}

func New_S2C_UpdateUserData() *S2C_UpdateUserData {
	m := &S2C_UpdateUserData{
		Data: New_User(),
	}
	return m
}

var g_S2C_UpdateUserData_Pool = sync.Pool{}

func Get_S2C_UpdateUserData() *S2C_UpdateUserData {
	m, ok := g_S2C_UpdateUserData_Pool.Get().(*S2C_UpdateUserData)
	if !ok {
		m = New_S2C_UpdateUserData()
	} else {
		if m == nil {
			m = New_S2C_UpdateUserData()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_UpdateUserData(i interface{}) {
	if m, ok := i.(*S2C_UpdateUserData); ok && m != nil {
		g_S2C_UpdateUserData_Pool.Put(i)
	}
}

func init() {
	Protocol.Register(
		&S2C_UpdateUserData{},
		func() protocol.IMessage { return Get_S2C_UpdateUserData() },
		func(msg protocol.IMessage) { Put_S2C_UpdateUserData(msg) },
	)
}

// message [S2C_UpdateUserData] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_UpdateUserData] begin
func (m *C2S_UpdateUserData) ResetEx() {
	m.ID = ""

}

func (m C2S_UpdateUserData) Clone() *C2S_UpdateUserData {
	n, ok := g_C2S_UpdateUserData_Pool.Get().(*C2S_UpdateUserData)
	if !ok || n == nil {
		n = &C2S_UpdateUserData{}
	}

	n.ID = m.ID

	return n
}

func Clone_C2S_UpdateUserData_Slice(dst []*C2S_UpdateUserData, src []*C2S_UpdateUserData) []*C2S_UpdateUserData {
	for _, i := range dst {
		Put_C2S_UpdateUserData(i)
	}
	dst = []*C2S_UpdateUserData{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func (C2S_UpdateUserData) V2() {
}

func (C2S_UpdateUserData) MessageID() protocol.MessageID {
	return "msg.C2S_UpdateUserData"
}

func C2S_UpdateUserData_MessageID() protocol.MessageID {
	return "msg.C2S_UpdateUserData"
}

func New_C2S_UpdateUserData() *C2S_UpdateUserData {
	m := &C2S_UpdateUserData{}
	return m
}

var g_C2S_UpdateUserData_Pool = sync.Pool{}

func Get_C2S_UpdateUserData() *C2S_UpdateUserData {
	m, ok := g_C2S_UpdateUserData_Pool.Get().(*C2S_UpdateUserData)
	if !ok {
		m = New_C2S_UpdateUserData()
	} else {
		if m == nil {
			m = New_C2S_UpdateUserData()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_UpdateUserData(i interface{}) {
	if m, ok := i.(*C2S_UpdateUserData); ok && m != nil {
		g_C2S_UpdateUserData_Pool.Put(i)
	}
}

func init() {
	Protocol.Register(
		&C2S_UpdateUserData{},
		func() protocol.IMessage { return Get_C2S_UpdateUserData() },
		func(msg protocol.IMessage) { Put_C2S_UpdateUserData(msg) },
	)
}

// message [C2S_UpdateUserData] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_UpdateItems] begin
func (m *S2C_UpdateItems) ResetEx() {

	for _, i := range m.GainItems {
		Put_Item(i)
	}
	m.GainItems = []*Item{}

	for _, i := range m.LostItems {
		Put_Item(i)
	}
	m.LostItems = []*Item{}

}

func (m S2C_UpdateItems) Clone() *S2C_UpdateItems {
	n, ok := g_S2C_UpdateItems_Pool.Get().(*S2C_UpdateItems)
	if !ok || n == nil {
		n = &S2C_UpdateItems{}
	}

	if len(m.GainItems) > 0 {
		for _, i := range m.GainItems {
			if i != nil {
				n.GainItems = append(n.GainItems, i.Clone())
			} else {
				n.GainItems = append(n.GainItems, nil)
			}
		}
	} else {
		n.GainItems = []*Item{}
	}

	if len(m.LostItems) > 0 {
		for _, i := range m.LostItems {
			if i != nil {
				n.LostItems = append(n.LostItems, i.Clone())
			} else {
				n.LostItems = append(n.LostItems, nil)
			}
		}
	} else {
		n.LostItems = []*Item{}
	}

	return n
}

func Clone_S2C_UpdateItems_Slice(dst []*S2C_UpdateItems, src []*S2C_UpdateItems) []*S2C_UpdateItems {
	for _, i := range dst {
		Put_S2C_UpdateItems(i)
	}
	dst = []*S2C_UpdateItems{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

func (S2C_UpdateItems) V2() {
}

func (S2C_UpdateItems) MessageID() protocol.MessageID {
	return "msg.S2C_UpdateItems"
}

func S2C_UpdateItems_MessageID() protocol.MessageID {
	return "msg.S2C_UpdateItems"
}

func New_S2C_UpdateItems() *S2C_UpdateItems {
	m := &S2C_UpdateItems{
		GainItems: []*Item{},
		LostItems: []*Item{},
	}
	return m
}

var g_S2C_UpdateItems_Pool = sync.Pool{}

func Get_S2C_UpdateItems() *S2C_UpdateItems {
	m, ok := g_S2C_UpdateItems_Pool.Get().(*S2C_UpdateItems)
	if !ok {
		m = New_S2C_UpdateItems()
	} else {
		if m == nil {
			m = New_S2C_UpdateItems()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_UpdateItems(i interface{}) {
	if m, ok := i.(*S2C_UpdateItems); ok && m != nil {
		g_S2C_UpdateItems_Pool.Put(i)
	}
}

func init() {
	Protocol.Register(
		&S2C_UpdateItems{},
		func() protocol.IMessage { return Get_S2C_UpdateItems() },
		func(msg protocol.IMessage) { Put_S2C_UpdateItems(msg) },
	)
}

// message [S2C_UpdateItems] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
