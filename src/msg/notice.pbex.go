// Code generated by protoc-gen-pbex-go. DO NOT EDIT IT!!!
// source: notice.proto

package msg

import (
	json "encoding/json"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
	sync "sync"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [Notice] begin
func (m *Notice) ResetEx() {

	m.Type = 0

	m.Name = ""

	m.Title = ""

	m.Content = ""

}

func (m Notice) Clone() *Notice {
	n, ok := g_Notice_Pool.Get().(*Notice)
	if !ok || n == nil {
		n = &Notice{}
	}

	n.Type = m.Type

	n.Name = m.Name

	n.Title = m.Title

	n.Content = m.Content

	return n
}

func Clone_Notice_Slice(dst []*Notice, src []*Notice) []*Notice {
	for _, i := range dst {
		Put_Notice(i)
	}
	if len(src) > 0 {
		dst = make([]*Notice, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*Notice{}
		dst = nil
	}
	return dst
}

func (m Notice) JsonString() string {
	ba, _ := json.Marshal(m)
	return "Notice:" + string(ba)
}

func New_Notice() *Notice {
	m := &Notice{}
	return m
}

var g_Notice_Pool = sync.Pool{}

func Get_Notice() *Notice {
	m, ok := g_Notice_Pool.Get().(*Notice)
	if !ok {
		m = New_Notice()
	} else {
		if m == nil {
			m = New_Notice()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_Notice(i interface{}) {
	if m, ok := i.(*Notice); ok && m != nil {
		g_Notice_Pool.Put(i)
	}
}

// message [Notice] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [C2S_GetNotices] begin
func (m *C2S_GetNotices) ResetEx() {

}

func (m C2S_GetNotices) Clone() *C2S_GetNotices {
	n, ok := g_C2S_GetNotices_Pool.Get().(*C2S_GetNotices)
	if !ok || n == nil {
		n = &C2S_GetNotices{}
	}

	return n
}

func Clone_C2S_GetNotices_Slice(dst []*C2S_GetNotices, src []*C2S_GetNotices) []*C2S_GetNotices {
	for _, i := range dst {
		Put_C2S_GetNotices(i)
	}
	if len(src) > 0 {
		dst = make([]*C2S_GetNotices, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*C2S_GetNotices{}
		dst = nil
	}
	return dst
}

func (m C2S_GetNotices) JsonString() string {
	ba, _ := json.Marshal(m)
	return "C2S_GetNotices:" + string(ba)
}

func New_C2S_GetNotices() *C2S_GetNotices {
	m := &C2S_GetNotices{}
	return m
}

var g_C2S_GetNotices_Pool = sync.Pool{}

func Get_C2S_GetNotices() *C2S_GetNotices {
	m, ok := g_C2S_GetNotices_Pool.Get().(*C2S_GetNotices)
	if !ok {
		m = New_C2S_GetNotices()
	} else {
		if m == nil {
			m = New_C2S_GetNotices()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_C2S_GetNotices(i interface{}) {
	if m, ok := i.(*C2S_GetNotices); ok && m != nil {
		g_C2S_GetNotices_Pool.Put(i)
	}
}

// message [C2S_GetNotices] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// message [S2C_GetNotices] begin
func (m *S2C_GetNotices) ResetEx() {

	for _, i := range m.Notices {
		Put_Notice(i)
	}

	//m.Notices = []*Notice{}
	m.Notices = nil

}

func (m S2C_GetNotices) Clone() *S2C_GetNotices {
	n, ok := g_S2C_GetNotices_Pool.Get().(*S2C_GetNotices)
	if !ok || n == nil {
		n = &S2C_GetNotices{}
	}

	if len(m.Notices) > 0 {
		n.Notices = make([]*Notice, len(m.Notices))
		for i, e := range m.Notices {

			if e != nil {
				n.Notices[i] = e.Clone()
			}

		}
	} else {
		//n.Notices = []*Notice{}
		n.Notices = nil
	}

	return n
}

func Clone_S2C_GetNotices_Slice(dst []*S2C_GetNotices, src []*S2C_GetNotices) []*S2C_GetNotices {
	for _, i := range dst {
		Put_S2C_GetNotices(i)
	}
	if len(src) > 0 {
		dst = make([]*S2C_GetNotices, len(src))
		for i, e := range src {
			if e != nil {
				dst[i] = e.Clone()
			}
		}
	} else {
		//dst = []*S2C_GetNotices{}
		dst = nil
	}
	return dst
}

func (m S2C_GetNotices) JsonString() string {
	ba, _ := json.Marshal(m)
	return "S2C_GetNotices:" + string(ba)
}

func New_S2C_GetNotices() *S2C_GetNotices {
	m := &S2C_GetNotices{}
	return m
}

var g_S2C_GetNotices_Pool = sync.Pool{}

func Get_S2C_GetNotices() *S2C_GetNotices {
	m, ok := g_S2C_GetNotices_Pool.Get().(*S2C_GetNotices)
	if !ok {
		m = New_S2C_GetNotices()
	} else {
		if m == nil {
			m = New_S2C_GetNotices()
		} else {
			m.ResetEx()
		}
	}
	return m
}

func Put_S2C_GetNotices(i interface{}) {
	if m, ok := i.(*S2C_GetNotices); ok && m != nil {
		g_S2C_GetNotices_Pool.Put(i)
	}
}

// message [S2C_GetNotices] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
