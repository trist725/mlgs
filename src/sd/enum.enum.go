// Code generated by protoc-gen-enum-go. DO NOT EDIT IT!!!
// source: enum.proto

/*
It has these top-level messages:
*/

package sd

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [E_Item] begin

///物品大类型枚举
type E_Item int32

const (
	E_Item_ E_Item = 0
	///货币
	E_Item_Money E_Item = 1
	///金币补给包
	E_Item_Coin_SupplyBag E_Item = 2
	///荷官皮肤
	E_Item_DealerSkin E_Item = 3
	///钻石补给包
	E_Item_Diamond_SupplyBag E_Item = 4
)

var E_Item_name = map[int32]string{
	0: "E_Item_",
	1: "E_Item_Money",
	2: "E_Item_Coin_SupplyBag",
	3: "E_Item_DealerSkin",
	4: "E_Item_Diamond_SupplyBag",
}

var E_Item_value = map[string]int32{
	"E_Item_":                  0,
	"E_Item_Money":             1,
	"E_Item_Coin_SupplyBag":    2,
	"E_Item_DealerSkin":        3,
	"E_Item_Diamond_SupplyBag": 4,
}

var E_Item_Slice = []int32{
	0,
	1,
	2,
	3,
	4,
}

func (x E_Item) String() string {
	if name, ok := E_Item_name[int32(x)]; ok {
		return name
	}
	return ""
}

func E_Item_Len() int {
	return len(E_Item_Slice)
}

func Check_E_Item_I(value int32) bool {
	if _, ok := E_Item_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_E_Item(value E_Item) bool {
	return Check_E_Item_I(int32(value))
}

func Each_E_Item(f func(E_Item) bool) {
	for _, value := range E_Item_Slice {
		if !f(E_Item(value)) {
			break
		}
	}
}

func Each_E_Item_I(f func(int32) bool) {
	for _, value := range E_Item_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [E_Item] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [E_Money] begin

///货币类型枚举
type E_Money int32

const (
	E_Money_ E_Money = 0
	///金币
	E_Money_Gold E_Money = 1
	///钻石
	E_Money_Diamond E_Money = 2
	///皮肤
	E_Money_DealerSkin E_Money = 3
	///人民币
	E_Money_RMB E_Money = 4
)

var E_Money_name = map[int32]string{
	0: "E_Money_",
	1: "E_Money_Gold",
	2: "E_Money_Diamond",
	3: "E_Money_DealerSkin",
	4: "E_Money_RMB",
}

var E_Money_value = map[string]int32{
	"E_Money_":           0,
	"E_Money_Gold":       1,
	"E_Money_Diamond":    2,
	"E_Money_DealerSkin": 3,
	"E_Money_RMB":        4,
}

var E_Money_Slice = []int32{
	0,
	1,
	2,
	3,
	4,
}

func (x E_Money) String() string {
	if name, ok := E_Money_name[int32(x)]; ok {
		return name
	}
	return ""
}

func E_Money_Len() int {
	return len(E_Money_Slice)
}

func Check_E_Money_I(value int32) bool {
	if _, ok := E_Money_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_E_Money(value E_Money) bool {
	return Check_E_Money_I(int32(value))
}

func Each_E_Money(f func(E_Money) bool) {
	for _, value := range E_Money_Slice {
		if !f(E_Money(value)) {
			break
		}
	}
}

func Each_E_Money_I(f func(int32) bool) {
	for _, value := range E_Money_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [E_Money] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [E_DealerSkin] begin

///荷官皮肤类型枚举
type E_DealerSkin int32

const (
	E_DealerSkin_ E_DealerSkin = 0

	E_DealerSkin_1 E_DealerSkin = 1

	E_DealerSkin_2 E_DealerSkin = 2

	E_DealerSkin_3 E_DealerSkin = 3
)

var E_DealerSkin_name = map[int32]string{
	0: "E_DealerSkin_",
	1: "E_DealerSkin_1",
	2: "E_DealerSkin_2",
	3: "E_DealerSkin_3",
}

var E_DealerSkin_value = map[string]int32{
	"E_DealerSkin_":  0,
	"E_DealerSkin_1": 1,
	"E_DealerSkin_2": 2,
	"E_DealerSkin_3": 3,
}

var E_DealerSkin_Slice = []int32{
	0,
	1,
	2,
	3,
}

func (x E_DealerSkin) String() string {
	if name, ok := E_DealerSkin_name[int32(x)]; ok {
		return name
	}
	return ""
}

func E_DealerSkin_Len() int {
	return len(E_DealerSkin_Slice)
}

func Check_E_DealerSkin_I(value int32) bool {
	if _, ok := E_DealerSkin_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_E_DealerSkin(value E_DealerSkin) bool {
	return Check_E_DealerSkin_I(int32(value))
}

func Each_E_DealerSkin(f func(E_DealerSkin) bool) {
	for _, value := range E_DealerSkin_Slice {
		if !f(E_DealerSkin(value)) {
			break
		}
	}
}

func Each_E_DealerSkin_I(f func(int32) bool) {
	for _, value := range E_DealerSkin_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [E_DealerSkin] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [E_RewardGroupItemField] begin

///奖励组物品的字段枚举
type E_RewardGroupItemField int32

const (
	E_RewardGroupItemField_TID E_RewardGroupItemField = 0

	E_RewardGroupItemField_Num E_RewardGroupItemField = 1

	E_RewardGroupItemField_Weight E_RewardGroupItemField = 2

	E_RewardGroupItemField_Count E_RewardGroupItemField = 3
)

var E_RewardGroupItemField_name = map[int32]string{
	0: "E_RewardGroupItemField_TID",
	1: "E_RewardGroupItemField_Num",
	2: "E_RewardGroupItemField_Weight",
	3: "E_RewardGroupItemField_Count",
}

var E_RewardGroupItemField_value = map[string]int32{
	"E_RewardGroupItemField_TID":    0,
	"E_RewardGroupItemField_Num":    1,
	"E_RewardGroupItemField_Weight": 2,
	"E_RewardGroupItemField_Count":  3,
}

var E_RewardGroupItemField_Slice = []int32{
	0,
	1,
	2,
	3,
}

func (x E_RewardGroupItemField) String() string {
	if name, ok := E_RewardGroupItemField_name[int32(x)]; ok {
		return name
	}
	return ""
}

func E_RewardGroupItemField_Len() int {
	return len(E_RewardGroupItemField_Slice)
}

func Check_E_RewardGroupItemField_I(value int32) bool {
	if _, ok := E_RewardGroupItemField_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_E_RewardGroupItemField(value E_RewardGroupItemField) bool {
	return Check_E_RewardGroupItemField_I(int32(value))
}

func Each_E_RewardGroupItemField(f func(E_RewardGroupItemField) bool) {
	for _, value := range E_RewardGroupItemField_Slice {
		if !f(E_RewardGroupItemField(value)) {
			break
		}
	}
}

func Each_E_RewardGroupItemField_I(f func(int32) bool) {
	for _, value := range E_RewardGroupItemField_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [E_RewardGroupItemField] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [E_CostItemField] begin

///消耗物品的字段枚举
type E_CostItemField int32

const (
	E_CostItemField_TID E_CostItemField = 0

	E_CostItemField_Num E_CostItemField = 1

	E_CostItemField_Count E_CostItemField = 2
)

var E_CostItemField_name = map[int32]string{
	0: "E_CostItemField_TID",
	1: "E_CostItemField_Num",
	2: "E_CostItemField_Count",
}

var E_CostItemField_value = map[string]int32{
	"E_CostItemField_TID":   0,
	"E_CostItemField_Num":   1,
	"E_CostItemField_Count": 2,
}

var E_CostItemField_Slice = []int32{
	0,
	1,
	2,
}

func (x E_CostItemField) String() string {
	if name, ok := E_CostItemField_name[int32(x)]; ok {
		return name
	}
	return ""
}

func E_CostItemField_Len() int {
	return len(E_CostItemField_Slice)
}

func Check_E_CostItemField_I(value int32) bool {
	if _, ok := E_CostItemField_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_E_CostItemField(value E_CostItemField) bool {
	return Check_E_CostItemField_I(int32(value))
}

func Each_E_CostItemField(f func(E_CostItemField) bool) {
	for _, value := range E_CostItemField_Slice {
		if !f(E_CostItemField(value)) {
			break
		}
	}
}

func Each_E_CostItemField_I(f func(int32) bool) {
	for _, value := range E_CostItemField_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [E_CostItemField] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// enum [E_RoomType] begin

///房间类型枚举
type E_RoomType int32

const (
	E_RoomType_ E_RoomType = 0
	///快速匹配
	E_RoomType_Quick E_RoomType = 1
	///练习场
	E_RoomType_Training E_RoomType = 2
	///赛事场
	E_RoomType_Match E_RoomType = 3
)

var E_RoomType_name = map[int32]string{
	0: "E_RoomType_",
	1: "E_RoomType_Quick",
	2: "E_RoomType_Training",
	3: "E_RoomType_Match",
}

var E_RoomType_value = map[string]int32{
	"E_RoomType_":         0,
	"E_RoomType_Quick":    1,
	"E_RoomType_Training": 2,
	"E_RoomType_Match":    3,
}

var E_RoomType_Slice = []int32{
	0,
	1,
	2,
	3,
}

func (x E_RoomType) String() string {
	if name, ok := E_RoomType_name[int32(x)]; ok {
		return name
	}
	return ""
}

func E_RoomType_Len() int {
	return len(E_RoomType_Slice)
}

func Check_E_RoomType_I(value int32) bool {
	if _, ok := E_RoomType_name[value]; ok && value != 0 {
		return true
	}
	return false
}

func Check_E_RoomType(value E_RoomType) bool {
	return Check_E_RoomType_I(int32(value))
}

func Each_E_RoomType(f func(E_RoomType) bool) {
	for _, value := range E_RoomType_Slice {
		if !f(E_RoomType(value)) {
			break
		}
	}
}

func Each_E_RoomType_I(f func(int32) bool) {
	for _, value := range E_RoomType_Slice {
		if !f(value) {
			break
		}
	}
}

// enum [E_RoomType] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
