// Code generated by protoc-gen-mgo-go. DO NOT EDIT IT!!!
// source: quest.proto

/*
It has these top-level messages:
	Quest
*/

package model

import "fmt"
import "encoding/json"
import "sync"
import "github.com/trist725/myleaf/db/mongodb"
import "gopkg.in/mgo.v2"

var _ = fmt.Sprintf
var _ = json.Marshal
var _ *sync.Pool
var _ *mongodb.DialContext
var _ *mgo.DBRef

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// collection [Quest] begin

type Quest struct {
	///在任务表中的id
	Id int64 `bson:"Id"`
	///完成进度
	Progress int64 `bson:"Progress"`
	///是否已领取奖励
	Received bool `bson:"Received"`
	///是否已完成
	Completed bool `bson:"Completed"`
	///任务类型
	Type int32 `bson:"Type"`
}

func New_Quest() *Quest {
	m := &Quest{}
	return m
}

func (m Quest) String() string {
	ba, _ := json.Marshal(m)
	return fmt.Sprintf("{\"Quest\":%s}", string(ba))
}

func (m *Quest) Reset() {
	m.Id = 0
	m.Progress = 0
	m.Received = false
	m.Completed = false
	m.Type = 0

}

func (m Quest) Clone() *Quest {
	n, ok := g_Quest_Pool.Get().(*Quest)
	if !ok || n == nil {
		n = &Quest{}
	}

	n.Id = m.Id
	n.Progress = m.Progress
	n.Received = m.Received
	n.Completed = m.Completed
	n.Type = m.Type

	return n
}

func Clone_Quest_Slice(dst []*Quest, src []*Quest) []*Quest {
	for _, i := range dst {
		Put_Quest(i)
	}
	dst = []*Quest{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

var g_Quest_Pool = sync.Pool{}

func Get_Quest() *Quest {
	m, ok := g_Quest_Pool.Get().(*Quest)
	if !ok {
		m = New_Quest()
	} else {
		if m == nil {
			m = New_Quest()
		} else {
			m.Reset()
		}
	}
	return m
}

func Put_Quest(i interface{}) {
	if m, ok := i.(*Quest); ok && m != nil {
		g_Quest_Pool.Put(i)
	}
}

// collection [Quest] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
