// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

package model

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

/// 用户数据
//@collection
type User struct {
	/// mongodb默认主键_id做用户id
	//@bson=_id
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty" bson:"_id"`
	/// 帐号id
	AccountID int64 `protobuf:"varint,2,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	///等级
	Level int32 `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	///头像url
	AvatarURL string `protobuf:"bytes,4,opt,name=AvatarURL,proto3" json:"AvatarURL,omitempty"`
	/// 服务器ID
	//int32 ServerID = 3;
	/// 名字
	NickName string `protobuf:"bytes,5,opt,name=NickName,proto3" json:"NickName,omitempty"`
	/// 性别
	Sex string `protobuf:"bytes,6,opt,name=Sex,proto3" json:"Sex,omitempty"`
	/// 创建时刻
	CreateTime int64 `protobuf:"varint,7,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	/// 上次登录时刻
	LastLoginTime int64 `protobuf:"varint,8,opt,name=LastLoginTime,proto3" json:"LastLoginTime,omitempty"`
	/// 上次登出时刻
	LastLogoutTime int64 `protobuf:"varint,9,opt,name=LastLogoutTime,proto3" json:"LastLogoutTime,omitempty"`
	///经验
	Exp int64 `protobuf:"varint,12,opt,name=Exp,proto3" json:"Exp,omitempty"`
	///今日是否已签到
	DaySigned bool `protobuf:"varint,13,opt,name=DaySigned,proto3" json:"DaySigned,omitempty"`
	///已签到天数
	SignedDays int32 `protobuf:"varint,14,opt,name=SignedDays,proto3" json:"SignedDays,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetAccountID() int64 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *User) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User) GetAvatarURL() string {
	if m != nil {
		return m.AvatarURL
	}
	return ""
}

func (m *User) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *User) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *User) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *User) GetLastLoginTime() int64 {
	if m != nil {
		return m.LastLoginTime
	}
	return 0
}

func (m *User) GetLastLogoutTime() int64 {
	if m != nil {
		return m.LastLogoutTime
	}
	return 0
}

func (m *User) GetExp() int64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *User) GetDaySigned() bool {
	if m != nil {
		return m.DaySigned
	}
	return false
}

func (m *User) GetSignedDays() int32 {
	if m != nil {
		return m.SignedDays
	}
	return 0
}

func init() {
	proto.RegisterType((*User)(nil), "model.User")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xc1, 0x4e, 0xf2, 0x40,
	0x14, 0x85, 0x99, 0x42, 0xf9, 0xe1, 0xe6, 0x87, 0x98, 0x89, 0x8b, 0x09, 0x31, 0x63, 0x43, 0x8c,
	0xe9, 0x46, 0x58, 0xb8, 0x73, 0x27, 0xd6, 0x05, 0x49, 0xc3, 0xa2, 0xc8, 0xda, 0x4c, 0xcb, 0x58,
	0x1b, 0x69, 0x87, 0xb4, 0x53, 0x02, 0x6f, 0xe1, 0x63, 0xb9, 0x64, 0xe9, 0xca, 0x18, 0xf0, 0x09,
	0x7c, 0x02, 0x33, 0x17, 0x23, 0xe8, 0xee, 0x9c, 0xef, 0x9c, 0x9b, 0xb9, 0x33, 0x03, 0x50, 0x16,
	0x32, 0xef, 0xcd, 0x73, 0xa5, 0x15, 0xb5, 0x53, 0x35, 0x95, 0xb3, 0xce, 0x45, 0x9c, 0xe8, 0xc7,
	0x32, 0xec, 0x45, 0x2a, 0xed, 0xc7, 0x2a, 0x56, 0x7d, 0x4c, 0xc3, 0xf2, 0x01, 0x1d, 0x1a, 0x54,
	0xbb, 0xa9, 0xee, 0x87, 0x05, 0xb5, 0x49, 0x21, 0x73, 0xca, 0xc1, 0x1a, 0x7a, 0x8c, 0x38, 0xc4,
	0xad, 0x0e, 0xda, 0x9f, 0x6f, 0xa7, 0x10, 0x16, 0x2a, 0xbb, 0xea, 0xde, 0x27, 0xd3, 0x6e, 0x60,
	0x0d, 0x3d, 0x7a, 0x02, 0xcd, 0xeb, 0x28, 0x52, 0x65, 0xa6, 0x87, 0x1e, 0xb3, 0x4c, 0x2d, 0xd8,
	0x03, 0x7a, 0x0c, 0xb6, 0x2f, 0x17, 0x72, 0xc6, 0xaa, 0x0e, 0x71, 0xed, 0x60, 0x67, 0x70, 0x66,
	0x21, 0xb4, 0xc8, 0x27, 0x81, 0xcf, 0x6a, 0x0e, 0x71, 0x9b, 0xc1, 0x1e, 0xd0, 0x0e, 0x34, 0x46,
	0x49, 0xf4, 0x34, 0x12, 0xa9, 0x64, 0x36, 0x86, 0x3f, 0x9e, 0x1e, 0x41, 0x75, 0x2c, 0x97, 0xac,
	0x8e, 0xd8, 0x48, 0xca, 0x01, 0x6e, 0x72, 0x29, 0xb4, 0xbc, 0x4b, 0x52, 0xc9, 0xfe, 0xe1, 0x02,
	0x07, 0x84, 0x9e, 0x41, 0xcb, 0x17, 0x85, 0xf6, 0x55, 0x9c, 0x64, 0x58, 0x69, 0x60, 0xe5, 0x37,
	0xa4, 0xe7, 0xd0, 0xfe, 0x06, 0xaa, 0xd4, 0x58, 0x6b, 0x62, 0xed, 0x0f, 0x35, 0xe7, 0xdf, 0x2e,
	0xe7, 0xec, 0x3f, 0x86, 0x46, 0x9a, 0xbb, 0x78, 0x62, 0x35, 0x4e, 0xe2, 0x4c, 0x4e, 0x59, 0xcb,
	0x21, 0x6e, 0x23, 0xd8, 0x03, 0xb3, 0xdd, 0x4e, 0x79, 0x62, 0x55, 0xb0, 0x36, 0x3e, 0xc2, 0x01,
	0x19, 0xb0, 0x97, 0x0d, 0x27, 0xeb, 0x0d, 0x27, 0xef, 0x1b, 0x4e, 0x9e, 0xb7, 0xbc, 0xb2, 0xde,
	0xf2, 0xca, 0xeb, 0x96, 0x57, 0xc2, 0x3a, 0xfe, 0xc3, 0xe5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd0, 0xa0, 0xbb, 0x60, 0xcb, 0x01, 0x00, 0x00,
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignedDays != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.SignedDays))
		i--
		dAtA[i] = 0x70
	}
	if m.DaySigned {
		i--
		if m.DaySigned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Exp != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x60
	}
	if m.LastLogoutTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LastLogoutTime))
		i--
		dAtA[i] = 0x48
	}
	if m.LastLoginTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.LastLoginTime))
		i--
		dAtA[i] = 0x40
	}
	if m.CreateTime != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Sex) > 0 {
		i -= len(m.Sex)
		copy(dAtA[i:], m.Sex)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Sex)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AvatarURL) > 0 {
		i -= len(m.AvatarURL)
		copy(dAtA[i:], m.AvatarURL)
		i = encodeVarintUser(dAtA, i, uint64(len(m.AvatarURL)))
		i--
		dAtA[i] = 0x22
	}
	if m.Level != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x18
	}
	if m.AccountID != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.AccountID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovUser(uint64(m.ID))
	}
	if m.AccountID != 0 {
		n += 1 + sovUser(uint64(m.AccountID))
	}
	if m.Level != 0 {
		n += 1 + sovUser(uint64(m.Level))
	}
	l = len(m.AvatarURL)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovUser(uint64(m.CreateTime))
	}
	if m.LastLoginTime != 0 {
		n += 1 + sovUser(uint64(m.LastLoginTime))
	}
	if m.LastLogoutTime != 0 {
		n += 1 + sovUser(uint64(m.LastLogoutTime))
	}
	if m.Exp != 0 {
		n += 1 + sovUser(uint64(m.Exp))
	}
	if m.DaySigned {
		n += 2
	}
	if m.SignedDays != 0 {
		n += 1 + sovUser(uint64(m.SignedDays))
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			m.AccountID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccountID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvatarURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginTime", wireType)
			}
			m.LastLoginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLoginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogoutTime", wireType)
			}
			m.LastLogoutTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogoutTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaySigned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DaySigned = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedDays", wireType)
			}
			m.SignedDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedDays |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
