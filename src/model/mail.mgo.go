// Code generated by protoc-gen-mgo-go. DO NOT EDIT IT!!!
// source: mail.proto

/*
It has these top-level messages:
	Mail
*/

package model

import "fmt"
import "encoding/json"
import "sync"
import "github.com/trist725/myleaf/db/mongodb"
import "gopkg.in/mgo.v2"

var _ = fmt.Sprintf
var _ = json.Marshal
var _ *sync.Pool
var _ *mongodb.DialContext
var _ *mgo.DBRef

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// collection [Mail] begin

type Mail struct {
	Id int64 `bson:"Id"`
	///是否已领取奖励
	Received bool `bson:"Received"`
	///奖励类型,对应item表id
	RewardType int64 `bson:"RewardType"`
	///奖励数量
	RewardNum int64 `bson:"RewardNum"`
	///邮件内容
	Content string `bson:"Content"`
}

func New_Mail() *Mail {
	m := &Mail{}
	return m
}

func (m Mail) String() string {
	ba, _ := json.Marshal(m)
	return fmt.Sprintf("{\"Mail\":%s}", string(ba))
}

func (m *Mail) Reset() {
	m.Id = 0
	m.Received = false
	m.RewardType = 0
	m.RewardNum = 0
	m.Content = ""

}

func (m Mail) Clone() *Mail {
	n, ok := g_Mail_Pool.Get().(*Mail)
	if !ok || n == nil {
		n = &Mail{}
	}

	n.Id = m.Id
	n.Received = m.Received
	n.RewardType = m.RewardType
	n.RewardNum = m.RewardNum
	n.Content = m.Content

	return n
}

func Clone_Mail_Slice(dst []*Mail, src []*Mail) []*Mail {
	for _, i := range dst {
		Put_Mail(i)
	}
	dst = []*Mail{}

	for _, i := range src {
		dst = append(dst, i.Clone())
	}

	return dst
}

var g_Mail_Pool = sync.Pool{}

func Get_Mail() *Mail {
	m, ok := g_Mail_Pool.Get().(*Mail)
	if !ok {
		m = New_Mail()
	} else {
		if m == nil {
			m = New_Mail()
		} else {
			m.Reset()
		}
	}
	return m
}

func Put_Mail(i interface{}) {
	if m, ok := i.(*Mail); ok && m != nil {
		g_Mail_Pool.Put(i)
	}
}

// collection [Mail] end
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
